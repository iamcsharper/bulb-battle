{"version":3,"file":"895.js","mappings":"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","sources":["webpack://citylights/./node_modules/sim-ecs/src/commands/command-entity-builder.ts","webpack://citylights/./node_modules/sim-ecs/src/commands/commands-aggregator.ts","webpack://citylights/./node_modules/sim-ecs/src/commands/commands.ts","webpack://citylights/./node_modules/sim-ecs/src/ecs.ts","webpack://citylights/./node_modules/sim-ecs/src/entity-builder.ts","webpack://citylights/./node_modules/sim-ecs/src/entity.ts","webpack://citylights/./node_modules/sim-ecs/src/index.ts","webpack://citylights/./node_modules/sim-ecs/src/pda.ts","webpack://citylights/./node_modules/sim-ecs/src/query.ts","webpack://citylights/./node_modules/sim-ecs/src/query.spec.ts","webpack://citylights/./node_modules/sim-ecs/src/serde/default-handlers.ts","webpack://citylights/./node_modules/sim-ecs/src/serde/serde.ts","webpack://citylights/./node_modules/sim-ecs/src/serde/serde.spec.ts","webpack://citylights/./node_modules/sim-ecs/src/serde/serial-format.ts","webpack://citylights/./node_modules/sim-ecs/src/state.ts","webpack://citylights/./node_modules/sim-ecs/src/system.ts","webpack://citylights/./node_modules/sim-ecs/src/world-builder.ts","webpack://citylights/./node_modules/sim-ecs/src/world.ts","webpack://citylights/./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js"],"sourcesContent":["import {Entity} from \"../entity\";\r\nimport {ICommandEntityBuilder} from \"./command-entity-builder.spec\";\r\nimport {TObjectProto} from \"../_.spec\";\r\nimport {Commands} from \"./commands\";\r\n\r\nexport * from './command-entity-builder.spec';\r\n\r\nexport class CommandEntityBuilder implements ICommandEntityBuilder {\r\n    protected entity: Entity = new Entity();\r\n\r\n    constructor(\r\n        protected commands: Commands\r\n    ) {}\r\n\r\n    build(): void {\r\n        this.commands.aggregator.addCommand(() => this.commands.world.addEntity(this.entity));\r\n    }\r\n\r\n    with(component: Object | TObjectProto, ...args: unknown[]): CommandEntityBuilder {\r\n        this.entity.addComponent(this.asComponent(component));\r\n        return this;\r\n    }\r\n\r\n    withAll(...components: (Object | TObjectProto)[]): CommandEntityBuilder {\r\n        let component;\r\n\r\n        for (component of components) {\r\n            this.with(component);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected asComponent(component: Object | TObjectProto, ...args: unknown[]): Object {\r\n        return typeof component === 'object'\r\n            ? component\r\n            : new (component.prototype.constructor.bind(component, ...Array.from(arguments).slice(1)))();\r\n    }\r\n}\r\n","import {ICommandsAggregator, TCommand} from \"./commands-aggregator.spec\";\r\nimport IWorld from \"../world.spec\";\r\n\r\nexport * from \"./commands-aggregator.spec\";\r\n\r\nexport class CommandsAggregator implements ICommandsAggregator {\r\n    commands: TCommand[] = [];\r\n    doMaintain = false;\r\n\r\n    constructor(\r\n        protected world: IWorld,\r\n    ) {}\r\n\r\n    addCommand(command: TCommand): void {\r\n        this.commands.push(command);\r\n    }\r\n\r\n    async executeAll(): Promise<void> {\r\n        for (let command = this.commands.shift(); !!command; command = this.commands.shift()) {\r\n            await command();\r\n        }\r\n\r\n        if (this.doMaintain) {\r\n            this.world.maintain();\r\n        }\r\n    }\r\n\r\n    triggerMaintain() {\r\n        this.doMaintain = true;\r\n    }\r\n}\r\n","import {ICommands} from \"./commands.spec\";\r\nimport {IEntity} from \"../entity.spec\";\r\nimport {TTypeProto} from \"../_.spec\";\r\nimport {ISerialFormat} from \"../serde/serial-format.spec\";\r\nimport {TDeserializer, TSerDeOptions} from \"../serde/serde.spec\";\r\nimport IWorld, {TGroupHandle} from \"../world.spec\";\r\nimport {TStateProto} from \"../state.spec\";\r\nimport {World} from \"../world\";\r\nimport {ICommandsAggregator, TCommand} from \"./commands-aggregator.spec\";\r\nimport {CommandEntityBuilder} from \"./command-entity-builder\";\r\n\r\nexport * from \"./commands.spec\";\r\n\r\nexport class Commands implements ICommands {\r\n    constructor(\r\n        public readonly world: World,\r\n        public readonly aggregator: ICommandsAggregator,\r\n    ) {}\r\n\r\n    addEntity(entity: IEntity) {\r\n        this.aggregator.addCommand(() => this.world.addEntity(entity));\r\n    }\r\n\r\n    addResource<T extends Object>(obj: TTypeProto<T> | T, ...args: unknown[]): T {\r\n        let type: TTypeProto<T>;\r\n        let instance: T;\r\n\r\n        if (typeof obj === 'object') {\r\n            type = obj.constructor as TTypeProto<T>;\r\n            instance = obj;\r\n        } else {\r\n            type = obj;\r\n            instance = new (obj.prototype.constructor.bind(obj, ...Array.from(arguments).slice(1)))();\r\n        }\r\n\r\n        if (this.world.resources.has(type)) {\r\n            throw new Error(`Resource with name \"${type.name}\" already exists!`);\r\n        }\r\n\r\n        this.aggregator.addCommand(() => {\r\n            if (this.world.resources.has(type)) {\r\n                throw new Error(`Resource with name \"${type.name}\" already exists!`);\r\n            }\r\n\r\n            this.world.resources.set(type, instance);\r\n        });\r\n\r\n        return instance;\r\n    }\r\n\r\n    buildEntity(): CommandEntityBuilder {\r\n        return new CommandEntityBuilder(this);\r\n    }\r\n\r\n    clearEntities(): void {\r\n        this.aggregator.addCommand(() => this.world.entities.clear());\r\n    }\r\n\r\n    load(prefab: ISerialFormat, options?: TSerDeOptions<TDeserializer>): TGroupHandle {\r\n        const handle = this.world.groups.nextHandle++;\r\n        this.aggregator.addCommand(() => { this.world.load(prefab, options, handle) });\r\n        return handle;\r\n    }\r\n\r\n    maintain() {\r\n        this.aggregator.triggerMaintain();\r\n    }\r\n\r\n    merge(world: IWorld): TGroupHandle {\r\n        const handle = this.world.groups.nextHandle++;\r\n        this.aggregator.addCommand(() => { this.world.merge(world, handle) });\r\n        return handle;\r\n    }\r\n\r\n    popState(): void {\r\n        this.aggregator.addCommand(() => this.world.popState());\r\n    }\r\n\r\n    pushState(NewState: TStateProto): void {\r\n        this.aggregator.addCommand(() => this.world.pushState(NewState));\r\n    }\r\n\r\n    queueCommand(command: TCommand) {\r\n        this.aggregator.addCommand(command);\r\n    }\r\n\r\n    removeEntity(entity: IEntity): void {\r\n        this.aggregator.addCommand(() => this.world.removeEntity(entity));\r\n    }\r\n\r\n    removeResource<T extends Object>(type: TTypeProto<T>): void {\r\n        if (!this.world.resources.has(type)) {\r\n            throw new Error(`Resource with name \"${type.name}\" does not exists!`);\r\n        }\r\n\r\n        this.aggregator.addCommand(() => {\r\n            if (!this.world.resources.has(type)) {\r\n                throw new Error(`Resource with name \"${type.name}\" does not exists!`);\r\n            }\r\n\r\n            this.world.resources.delete(type);\r\n        });\r\n    }\r\n\r\n    replaceResource<T extends Object>(obj: TTypeProto<T> | T, ...args: unknown[]): void {\r\n        let type: TTypeProto<T>;\r\n\r\n        if (typeof obj === 'object') {\r\n            type = obj.constructor as TTypeProto<T>;\r\n        } else {\r\n            type = obj;\r\n        }\r\n\r\n        if (!this.world.resources.has(type)) {\r\n            throw new Error(`Resource with name \"${type.name}\" does not exists!`);\r\n        }\r\n\r\n        this.aggregator.addCommand(() => {\r\n            if (!this.world.resources.has(type)) {\r\n                throw new Error(`Resource with name \"${type.name}\" does not exists!`);\r\n            }\r\n\r\n            this.world.resources.delete(type);\r\n            this.world.addResource(obj, ...args);\r\n        });\r\n    }\r\n\r\n    stopRun(): void {\r\n        this.aggregator.addCommand(() => this.world.stopRun());\r\n    }\r\n\r\n    unloadPrefab(handle: TGroupHandle): void {\r\n        this.aggregator.addCommand(() => this.world.unloadPrefab(handle));\r\n    }\r\n}\r\n","import {IWorld, World} from \"./world\";\r\nimport {IWorldBuilder} from \"./world-builder.spec\";\r\nimport {WorldBuilder} from \"./world-builder\";\r\n\r\n\r\ntype TWorldInfo = {\r\n    name?: string\r\n    world: IWorld\r\n};\r\n\r\nexport class ECS {\r\n    protected worlds: Map<World, TWorldInfo> = new Map();\r\n\r\n    buildWorld(name?: string): IWorldBuilder {\r\n        return new WorldBuilder(this).addCallback(world => this.worlds.set(world as World, { name, world }));\r\n    }\r\n\r\n    removeWorld(world: IWorld) {\r\n        this.worlds.delete(world as World);\r\n    }\r\n}\r\n\r\nexport default ECS;\r\n","import {Entity} from \"./entity\";\r\nimport IEntityBuilder from \"./entity-builder.spec\";\r\nimport {TObjectProto} from \"./_.spec\";\r\n\r\nexport * from './entity-builder.spec';\r\n\r\nexport class EntityBuilder implements IEntityBuilder {\r\n    protected entity = new Entity();\r\n\r\n    build(): Entity {\r\n        return this.entity;\r\n    }\r\n\r\n    with(component: Object | TObjectProto, ...args: unknown[]): EntityBuilder {\r\n        this.entity.addComponent(this.asComponent(component));\r\n        return this;\r\n    }\r\n\r\n    withAll(...components: (Object | TObjectProto)[]): EntityBuilder {\r\n        let component;\r\n\r\n        for (component of components) {\r\n            this.with(component);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected asComponent(component: Object | TObjectProto, ...args: unknown[]): Object {\r\n        return typeof component === 'object'\r\n            ? component\r\n            : new (component.prototype.constructor.bind(component, ...Array.from(arguments).slice(1)))();\r\n    }\r\n}\r\n","import {IEntity, TTag} from \"./entity.spec\";\r\nimport {TObjectProto, TTypeProto} from \"./_.spec\";\r\n\r\nexport * from './entity.spec';\r\n\r\nexport class Entity implements IEntity {\r\n    protected components: Map<TObjectProto, Object> = new Map();\r\n    protected tags: Set<TTag> = new Set();\r\n\r\n    addComponent(component: Object): Entity {\r\n        if (this.hasComponent(component.constructor as typeof Object)) {\r\n            throw new Error(`Component \"${component.constructor.name}\" already exists on entity!`)\r\n        }\r\n\r\n        this.components.set(component.constructor as TObjectProto, component);\r\n        return this;\r\n    }\r\n\r\n    addTag(tag: TTag): Entity {\r\n        this.tags.add(tag);\r\n        return this;\r\n    }\r\n\r\n    getComponent<T extends Object>(component: TTypeProto<T>): T | undefined {\r\n        return this.components.get(component) as T;\r\n    }\r\n\r\n    getComponents(): IterableIterator<Object> {\r\n        return this.components.values();\r\n    }\r\n\r\n    getTags(): IterableIterator<TTag> {\r\n        return this.tags.values();\r\n    }\r\n\r\n    hasComponent(component: typeof Object | TObjectProto): boolean {\r\n        return this.components.has(component);\r\n    }\r\n\r\n    hasTag(tag: TTag): boolean {\r\n        return this.tags.has(tag);\r\n    }\r\n\r\n    removeComponent(component: Object): Entity {\r\n        this.components.delete(component.constructor as TObjectProto);\r\n        return this;\r\n    }\r\n\r\n    removeTag(tag: TTag): Entity {\r\n        this.tags.delete(tag);\r\n        return this;\r\n    }\r\n}\r\n","export * from './ecs';\r\nexport * from './entity';\r\nexport * from './entity-builder';\r\nexport * from './query';\r\nexport * from './serde/serde';\r\nexport * from './serde/serial-format';\r\nexport * from './state';\r\nexport * from './system';\r\nexport * from './world';\r\n","import IPushDownAutomaton from \"./pda.spec\";\r\nimport {TTypeProto} from \"./_.spec\";\r\n\r\ntype TStateNode<T> = {\r\n    state: T,\r\n    prevNode?: TStateNode<T>,\r\n};\r\n\r\nexport class PushDownAutomaton<T> implements IPushDownAutomaton<T> {\r\n    protected currentState?: T;\r\n    protected statesTail?: TStateNode<T>;\r\n\r\n    get state(): T | undefined {\r\n        return this.currentState;\r\n    }\r\n\r\n    clear(): void {\r\n        this.currentState = undefined;\r\n        this.statesTail = undefined;\r\n    }\r\n\r\n    pop(): T | undefined {\r\n        if (!this.statesTail) return;\r\n\r\n        const oldTail = this.statesTail;\r\n\r\n        this.statesTail = this.statesTail.prevNode;\r\n        this.currentState = this.statesTail?.state;\r\n\r\n        return oldTail.state;\r\n    }\r\n\r\n    push<P extends TTypeProto<T>>(State: P): void {\r\n        this.currentState = new State();\r\n        this.statesTail = {\r\n            prevNode: this.statesTail,\r\n            state: this.currentState,\r\n        };\r\n    }\r\n}\r\n","import {\r\n    accessDescSym,\r\n    EAccess,\r\n    ETargetType,\r\n    IAccessDescriptor,\r\n    IExistenceDescriptor,\r\n    existenceDescSym,\r\n    EExistence,\r\n    IAccessQuery,\r\n    setEntitiesSym,\r\n    TExistenceQuery,\r\n    TAccessQueryParameter, TExistenceQueryParameter, addEntitySym, removeEntitySym, clearEntitiesSym\r\n} from \"./query.spec\";\r\nimport {Entity, IEntity, TTag} from \"./entity\";\r\nimport {TTypeProto} from \"./_.spec\";\r\nimport IWorld from \"./world.spec\";\r\n\r\nexport * from \"./query.spec\";\r\n\r\n\r\nexport type TAccessQueryData<DESC extends IAccessQuery<TTypeProto<Object>>> = {\r\n    [P in keyof DESC]: Required<Omit<InstanceType<DESC[P]>, keyof IAccessDescriptor<Object>>>\r\n}\r\n\r\n// todo: ReadEntity() should also work\r\nexport class Query<\r\n    DESC extends IAccessQuery<TTypeProto<Object>> | TExistenceQuery<TTypeProto<Object>>,\r\n    DATA =\r\n        DESC extends TExistenceQuery<TTypeProto<Object>>\r\n            ? IEntity\r\n            : DESC extends IAccessQuery<TTypeProto<Object>>\r\n                ? TAccessQueryData<DESC>\r\n                : never\r\n> {\r\n    protected queryResult: Map<IEntity, DATA> = new Map();\r\n\r\n    constructor(\r\n        protected queryDescriptor: DESC\r\n    ) {}\r\n\r\n    public get descriptor() {\r\n        return this.queryDescriptor;\r\n    }\r\n\r\n    public [addEntitySym](entity: IEntity) {\r\n        if (this.matchesEntity(entity)) {\r\n            if (Array.isArray(this.queryDescriptor)) {\r\n                this.queryResult.set(entity, entity as unknown as DATA);\r\n            } else {\r\n                this.queryResult.set(entity, this.getDataFromEntity(entity, this.queryDescriptor));\r\n            }\r\n        }\r\n    }\r\n\r\n    public [clearEntitiesSym]() {\r\n        this.queryResult.clear();\r\n    }\r\n\r\n    public [removeEntitySym](entity: IEntity) {\r\n        this.queryResult.delete(entity)\r\n    }\r\n\r\n    public [setEntitiesSym](entities: IterableIterator<IEntity>) {\r\n        let entity;\r\n\r\n        this.queryResult.clear();\r\n\r\n        for (entity of entities) {\r\n            this[addEntitySym](entity);\r\n        }\r\n    }\r\n\r\n    public execute(handler: (data: DATA) => void): void {\r\n        let data: DATA;\r\n        for (data of this.queryResult.values()) {\r\n            handler(data);\r\n        }\r\n    }\r\n\r\n    protected getDataFromEntity<K extends keyof DESC>(entity: IEntity, descriptor: DESC): DATA {\r\n        const components: Record<string, K | IEntity> = {};\r\n        let componentDesc: [string, TAccessQueryParameter<TTypeProto<K>>];\r\n\r\n        for (componentDesc of Object.entries(descriptor)) {\r\n            if (componentDesc[1][accessDescSym].type == EAccess.meta) {\r\n                if (componentDesc[1][accessDescSym].targetType == ETargetType.entity) {\r\n                    components[componentDesc[0]] = entity;\r\n                }\r\n            } else {\r\n                components[componentDesc[0]] = entity.getComponent(componentDesc[1][accessDescSym].target as TTypeProto<K>)!;\r\n            }\r\n        }\r\n\r\n        return components as unknown as DATA;\r\n    }\r\n\r\n    public iter(world?: IWorld): IterableIterator<DATA> {\r\n        if (world) {\r\n            const data: DATA[] = [];\r\n            // @ts-ignore todo: figure out why the type system errors `this`\r\n            const entities = world.getEntities(this);\r\n            let entity;\r\n\r\n            for (entity of entities) {\r\n                data.push(this.getDataFromEntity(entity, this.queryDescriptor));\r\n            }\r\n\r\n            return data.values();\r\n        } else {\r\n            return this.queryResult.values();\r\n        }\r\n    }\r\n\r\n    public matchesEntity(entity: IEntity): boolean {\r\n        if (Array.isArray(this.queryDescriptor)) {\r\n            let componentDesc: TExistenceQueryParameter<TTypeProto<Object>>;\r\n\r\n            for (componentDesc of this.queryDescriptor) {\r\n                if (\r\n                    componentDesc[existenceDescSym].targetType == ETargetType.tag\r\n                    && entity.hasTag(componentDesc[existenceDescSym].target as TTag) != (componentDesc[existenceDescSym].type == EExistence.set)\r\n                ) {\r\n                    return false;\r\n                }\r\n\r\n                if (\r\n                    componentDesc[existenceDescSym].targetType == ETargetType.component\r\n                    && entity.hasComponent(componentDesc[existenceDescSym].target as TTypeProto<Object>) != (componentDesc[existenceDescSym].type == EExistence.set)\r\n                ) {\r\n                    return false;\r\n                }\r\n            }\r\n        } else {\r\n            let componentDesc: TAccessQueryParameter<TTypeProto<Object>>;\r\n\r\n            for (componentDesc of Object.values(this.queryDescriptor)) {\r\n                if (\r\n                    componentDesc[accessDescSym].targetType == ETargetType.tag\r\n                    && !entity.hasTag(componentDesc[accessDescSym].target as TTag)\r\n                ) {\r\n                    return false;\r\n                }\r\n\r\n                if (\r\n                    componentDesc[accessDescSym].targetType == ETargetType.component\r\n                    && !entity.hasComponent(componentDesc[accessDescSym].target as TTypeProto<Object>)\r\n                ) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function ReadEntity(): TAccessQueryParameter<TTypeProto<Readonly<IEntity>>> {\r\n    return Object.assign({}, Entity, {\r\n        [accessDescSym]: {\r\n            target: Entity,\r\n            targetType: ETargetType.entity,\r\n            type: EAccess.meta,\r\n        },\r\n    } as IAccessDescriptor<Entity>);\r\n}\r\n\r\nexport function Read<C extends Object>(componentPrototype: TTypeProto<C>): TAccessQueryParameter<TTypeProto<Readonly<C>>> {\r\n    return Object.assign({}, componentPrototype.prototype, {\r\n        [accessDescSym]: {\r\n            target: componentPrototype,\r\n            targetType: ETargetType.component,\r\n            type: EAccess.read,\r\n        },\r\n    } as IAccessDescriptor<C>);\r\n}\r\n\r\nexport function Write<C extends Object>(componentPrototype: TTypeProto<C>): TAccessQueryParameter<TTypeProto<C>> {\r\n    return Object.assign({}, componentPrototype.prototype, {\r\n        [accessDescSym]: {\r\n            target: componentPrototype,\r\n            targetType: ETargetType.component,\r\n            type: EAccess.write,\r\n        },\r\n    });\r\n}\r\n\r\nexport function With<C extends Object>(componentPrototype: TTypeProto<C>): IExistenceDescriptor<TTypeProto<C>> {\r\n    return {\r\n        [existenceDescSym]: {\r\n            target: componentPrototype,\r\n            targetType: ETargetType.component,\r\n            type: EExistence.set,\r\n        }\r\n    };\r\n}\r\n\r\nexport function WithTag(tag: TTag): TAccessQueryParameter<TTypeProto<Object>> & IExistenceDescriptor<TTypeProto<Object>> {\r\n    return {\r\n        [accessDescSym]: {\r\n            target: tag,\r\n            targetType: ETargetType.tag,\r\n            type: EAccess.meta,\r\n        },\r\n        [existenceDescSym]: {\r\n            target: tag,\r\n            targetType: ETargetType.tag,\r\n            type: EExistence.set,\r\n        }\r\n    } as TAccessQueryParameter<TTypeProto<Object>> & IExistenceDescriptor<TTypeProto<Object>>;\r\n}\r\n\r\nexport function Without<C extends Object>(componentPrototype: TTypeProto<C>): IExistenceDescriptor<TTypeProto<C>> {\r\n    return {\r\n        [existenceDescSym]: {\r\n            target: componentPrototype,\r\n            targetType: ETargetType.component,\r\n            type: EExistence.unset,\r\n        }\r\n    };\r\n}\r\n\r\nexport function WithoutTag(tag: TTag): IExistenceDescriptor<TTypeProto<Object>> {\r\n    return {\r\n        [existenceDescSym]: {\r\n            target: tag,\r\n            targetType: ETargetType.tag,\r\n            type: EExistence.unset,\r\n        }\r\n    };\r\n}\r\n","import {TTypeProto} from \"./_.spec\";\r\nimport {TTag} from \"./entity\";\r\n\r\nexport type TAccessQueryParameter<C extends TTypeProto<Object>> = C & IAccessDescriptor<InstanceType<C>>;\r\nexport interface IAccessQuery<C extends TTypeProto<Object>> { [componentName: string]: TAccessQueryParameter<C> }\r\n\r\nexport type TExistenceQueryParameter<C extends TTypeProto<Object>> = IExistenceDescriptor<C>;\r\nexport type TExistenceQuery<C extends TTypeProto<Object>> = Array<TExistenceQueryParameter<C>>;\r\n\r\nexport const addEntitySym = Symbol();\r\nexport const clearEntitiesSym = Symbol();\r\nexport const removeEntitySym = Symbol();\r\nexport const setEntitiesSym = Symbol();\r\nexport const accessDescSym: unique symbol = Symbol();\r\nexport const existenceDescSym: unique symbol = Symbol();\r\n\r\nexport enum EAccess {\r\n    meta,\r\n    read,\r\n    write,\r\n}\r\n\r\nexport enum EExistence {\r\n    set,\r\n    unset,\r\n}\r\n\r\nexport enum ETargetType {\r\n    component,\r\n    entity,\r\n    tag,\r\n}\r\n\r\nexport interface IAccessDescriptor<C extends Object> {\r\n    [accessDescSym]: {\r\n        readonly target: TTypeProto<C> | TTag\r\n        readonly targetType: ETargetType\r\n        readonly type: EAccess\r\n    }\r\n}\r\n\r\nexport interface IExistenceDescriptor<C extends TTypeProto<Object>> {\r\n    [existenceDescSym]: {\r\n        readonly target: C | TTag\r\n        readonly targetType: ETargetType\r\n        readonly type: EExistence\r\n    }\r\n}\r\n\r\n/*\r\nexport interface IQuery<D extends IAccessQueryResult<Object> | TExistenceQueryResult> {\r\n    iter(): IterableIterator<D extends Array<infer T> ? IEntity : { [P in keyof D]: Required<Omit<InstanceType<D[P]>, keyof IAccessDescriptor<Object>>> }>\r\n    matchesEntity(entity: IEntity): boolean\r\n}\r\n\r\nexport type TQueryProto<D extends IAccessQueryResult<Object> | TExistenceQueryResult> = { new(): IQuery<D> };\r\n*/","import {TDeserializer, TSerializer} from \"./serde.spec\";\r\n\r\nexport const getDefaultSerializer = function (customSerializer?: TSerializer): TSerializer {\r\n    return (component: unknown) => {\r\n        let componentName: string = typeof component;\r\n\r\n        switch (typeof component) {\r\n            case 'number': {\r\n                return component;\r\n            }\r\n\r\n            case 'object': {\r\n                if (component == null) {\r\n                    return 'null';\r\n                }\r\n\r\n                componentName = component.constructor.name;\r\n\r\n                switch (component.constructor.name) {\r\n                    case 'Date':\r\n                        return (component as Date).getTime();\r\n                    case 'Array':\r\n                    case 'Object':\r\n                        return JSON.stringify(component.toString());\r\n                    case 'Map':\r\n                    case 'Set':\r\n                        return JSON.stringify(Array.from(component as Iterable<unknown>));\r\n                    case 'Number':\r\n                        return component;\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            case \"string\": {\r\n                return JSON.stringify(component);\r\n            }\r\n        }\r\n\r\n        if (!customSerializer) {\r\n            throw new Error(`Missing serializer for \"${componentName}\"!`);\r\n        }\r\n\r\n        return customSerializer(component);\r\n    };\r\n}\r\n\r\nexport const getDefaultDeserializer = function (customDeserializer?: TDeserializer): TDeserializer {\r\n    return (constructorName: string, data: unknown) => {\r\n        switch (constructorName.toLowerCase()) {\r\n            case 'array': {\r\n                if (!Array.isArray(data)) {\r\n                    throw new Error(`Cannot deserialize Array with data of type ${typeof data}! Array expected!`);\r\n                }\r\n\r\n                return data as Array<unknown>;\r\n            }\r\n\r\n            case 'date': {\r\n                if (typeof data != 'number') {\r\n                    throw new Error(`Cannot deserialize Date with data of type ${typeof data}! Number expected!`);\r\n                }\r\n\r\n                return new Date(data);\r\n            }\r\n\r\n            case 'map': {\r\n                if (!Array.isArray(data)) {\r\n                    throw new Error(`Cannot deserialize Map with data of type ${typeof data}! Array of arrays expected!`);\r\n                }\r\n\r\n                return new Map(data as [unknown, unknown][]);\r\n            }\r\n\r\n            case 'number': {\r\n                if (typeof data != 'number') {\r\n                    throw new Error(`Cannot deserialize Number with data of type ${typeof data}! Number expected!`);\r\n                }\r\n\r\n                return data as number;\r\n            }\r\n\r\n            case 'object': {\r\n                if (typeof data != 'object') {\r\n                    throw new Error(`Cannot deserialize Object with data of type ${typeof data}! Object expected!`);\r\n                }\r\n\r\n                return data as Object;\r\n            }\r\n\r\n            case 'set': {\r\n                if (!Array.isArray(data)) {\r\n                    throw new Error(`Cannot deserialize Set with data of type ${typeof data}! Array expected!`);\r\n                }\r\n\r\n                return new Set(data as Array<unknown>);\r\n            }\r\n\r\n            case 'string': {\r\n                if (typeof data != 'string') {\r\n                    throw new Error(`Cannot deserialize String with data of type ${typeof data}! String expected!`);\r\n                }\r\n\r\n                return data;\r\n            }\r\n        }\r\n\r\n        if (!customDeserializer) {\r\n            throw new Error(`Missing deserializer for \"${constructorName}\"!`);\r\n        }\r\n\r\n        return customDeserializer(constructorName, data);\r\n    }\r\n};\r\n","import {TObjectProto} from \"../_.spec\";\r\nimport {\r\n    CTagMarker,\r\n    ISerDe,\r\n    ISerDeDataSet,\r\n    ISerDeOperations,\r\n    TCustomDeserializer,\r\n    TDeserializer, TEntity,\r\n    TSerDeOptions,\r\n    TSerializer\r\n} from \"./serde.spec\";\r\nimport {ISerialFormat} from \"./serial-format.spec\";\r\nimport {SerialFormat} from \"./serial-format\";\r\nimport {IEntity, TTag} from \"../entity.spec\";\r\nimport {getDefaultDeserializer, getDefaultSerializer} from \"./default-handlers\";\r\nimport {Entity} from \"../entity\";\r\n\r\nexport * from \"./serde.spec\";\r\n\r\nexport class SerDe implements ISerDe {\r\n    protected typeHandlers = new Map<string, ISerDeOperations>();\r\n\r\n    deserialize(data: ISerialFormat, options?: TSerDeOptions<TDeserializer>): ISerDeDataSet {\r\n        const finalOptions: typeof options = {\r\n            useDefaultHandler: options?.useDefaultHandler ?? true,\r\n            useRegisteredHandlers: options?.useRegisteredHandlers ?? true,\r\n            fallbackHandler: options?.fallbackHandler,\r\n        };\r\n        const entities: IEntity[] = [];\r\n        let entity: Entity;\r\n        let serialComponentData: unknown;\r\n        let serialComponentName: string;\r\n        let serialEntity: TEntity;\r\n        let tag: TTag;\r\n\r\n        for (serialEntity of data) {\r\n            entity = new Entity();\r\n\r\n            for ([serialComponentName, serialComponentData] of Object.entries(serialEntity)) {\r\n                if (finalOptions.useRegisteredHandlers && this.typeHandlers.has(serialComponentName)) {\r\n                    entity.addComponent(this.typeHandlers.get(serialComponentName)!.deserializer(serialComponentData));\r\n                } else if (serialComponentName == CTagMarker) {\r\n                    if (!Array.isArray(serialComponentData)) {\r\n                        throw new Error('Expected array of tags for the hash identifier!');\r\n                    }\r\n\r\n                    for (tag of serialComponentData) {\r\n                        if (!['string', 'number'].includes(typeof tag)) {\r\n                            throw new Error('Tags must be of type string or number!');\r\n                        }\r\n\r\n                        entity.addTag(tag);\r\n                    }\r\n                } else if (finalOptions.useDefaultHandler) {\r\n                    entity.addComponent(getDefaultDeserializer(finalOptions.fallbackHandler)(serialComponentName, serialComponentData));\r\n                }\r\n            }\r\n\r\n            entities.push(entity);\r\n        }\r\n\r\n        return {\r\n            entities: entities.values(),\r\n        };\r\n    }\r\n\r\n    getRegisteredTypeHandlers(): IterableIterator<[string, ISerDeOperations]> {\r\n        return this.typeHandlers.entries();\r\n    }\r\n\r\n    registerTypeHandler(Type: TObjectProto, deserializer: TCustomDeserializer, serializer: TSerializer): void {\r\n        if (this.typeHandlers.has(Type.name)) {\r\n            throw new Error(`The type \"${Type.name}\" was already registered!`);\r\n        }\r\n\r\n        this.typeHandlers.set(Type.name, {\r\n            deserializer,\r\n            serializer,\r\n        });\r\n    }\r\n\r\n    serialize(data: ISerDeDataSet, options?: TSerDeOptions<TSerializer>): SerialFormat {\r\n        const finalOptions: typeof options = {\r\n            useDefaultHandler: options?.useDefaultHandler ?? true,\r\n            useRegisteredHandlers: options?.useRegisteredHandlers ?? true,\r\n            fallbackHandler: options?.fallbackHandler,\r\n        };\r\n        const outData = new SerialFormat();\r\n        let component: Object;\r\n        let entity: IEntity;\r\n        let serialData;\r\n        let serialEntity: TEntity;\r\n        let tags: TTag[];\r\n\r\n        for (entity of data.entities) {\r\n            serialEntity = {};\r\n\r\n            for (component of entity.getComponents()) {\r\n                if (finalOptions.useRegisteredHandlers && this.typeHandlers.has(component.constructor.name)) {\r\n                    serialData = this.typeHandlers.get(component.constructor.name)!.serializer(component);\r\n                } else if (finalOptions.useDefaultHandler) {\r\n                    serialData = getDefaultSerializer(finalOptions.fallbackHandler)(component);\r\n                }\r\n\r\n                serialEntity[component.constructor.name] = serialData;\r\n                serialData = undefined;\r\n            }\r\n\r\n            {\r\n                tags = Array.from(entity.getTags());\r\n\r\n                if (tags.length > 0) {\r\n                    serialEntity[CTagMarker] = tags;\r\n                }\r\n            }\r\n\r\n            outData.push(serialEntity);\r\n        }\r\n\r\n        return outData;\r\n    }\r\n}\r\n","import {IEntity} from \"../entity.spec\";\r\nimport {TObjectProto} from \"../_.spec\";\r\nimport {ISerialFormat} from \"./serial-format.spec\";\r\n\r\n/// stores the constructor name and the data blob on indices 0 and 1 accordingly\r\nexport type TCustomDeserializer = (data: unknown) => Object;\r\nexport type TDeserializer = (constructorName: string, data: unknown) => Object;\r\nexport type TEntity = { [componentName: string]: unknown }\r\nexport type TSerDeOptions<T> = {\r\n    fallbackHandler?: T,\r\n    useDefaultHandler?: boolean,\r\n    useRegisteredHandlers?: boolean,\r\n};\r\nexport type TSerializable = unknown;\r\nexport type TSerializer = (component: unknown) => TSerializable;\r\n\r\n\r\nexport interface ISerDeDataSet {\r\n    entities: IterableIterator<IEntity>\r\n}\r\n\r\nexport interface ISerDeOperations {\r\n    deserializer: TCustomDeserializer\r\n    serializer: TSerializer\r\n}\r\n\r\nexport interface ISerDe {\r\n    /**\r\n     * Transform writable data to usable data objects\r\n     * @param data\r\n     * @param options\r\n     */\r\n    deserialize(data: ISerialFormat, options?: TSerDeOptions<TDeserializer>): ISerDeDataSet\r\n\r\n    /**\r\n     * Get an overview over all registered type handlers; useful for debugging\r\n     */\r\n    getRegisteredTypeHandlers(): IterableIterator<[string, ISerDeOperations]>\r\n\r\n    /**\r\n     * Register type handlers for transformations\r\n     * @param Type\r\n     * @param deserializer\r\n     * @param serializer\r\n     */\r\n    registerTypeHandler(Type: TObjectProto, deserializer: TCustomDeserializer, serializer: TSerializer): void\r\n\r\n    /**\r\n     * Transform data objects into writable data\r\n     * @param data\r\n     * @param options\r\n     */\r\n    serialize(data: ISerDeDataSet, options?: TSerDeOptions<TSerializer>): ISerialFormat\r\n}\r\n\r\n\r\nexport const CTagMarker = '#Tags';\r\n","import {ISerialFormat} from \"./serial-format.spec\";\r\nimport {TEntity} from \"./serde.spec\";\r\n\r\nexport * from \"./serial-format.spec\";\r\n\r\nexport class SerialFormat extends Array<TEntity> implements ISerialFormat {\r\n    static fromArray(arr: TEntity[]): SerialFormat {\r\n        return new SerialFormat().fromArray(arr);\r\n    }\r\n\r\n    static fromJSON(json: string): SerialFormat {\r\n        return new SerialFormat().fromJSON(json);\r\n    }\r\n\r\n    fromArray(arr: TEntity[]): SerialFormat {\r\n        Object.assign(this, arr);\r\n        return this;\r\n    }\r\n\r\n    fromJSON(json: string): SerialFormat {\r\n        this.length = 0;\r\n\r\n        const newVals = JSON.parse(json);\r\n\r\n        if (!Array.isArray(newVals)) {\r\n            throw new Error('Input JSON must be an array!');\r\n        }\r\n\r\n        for (const entity of newVals) {\r\n            this.push(entity);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    toJSON(indentation?: string | number): string {\r\n        return JSON.stringify(Array.from(this), undefined, indentation);\r\n    }\r\n}\r\n","import {TSystemProto} from \"./system.spec\";\r\nimport IState from \"./state.spec\";\r\nimport {ITransitionActions} from \"./world.spec\";\r\n\r\nexport * from './state.spec';\r\n\r\nexport class State implements IState {\r\n    constructor(\r\n        protected _systems: TSystemProto[] = []\r\n    ) {}\r\n\r\n    get systems(): TSystemProto[] {\r\n        return this._systems;\r\n    }\r\n\r\n    activate(actions: ITransitionActions): void | Promise<void> {}\r\n\r\n    create(actions: ITransitionActions): void | Promise<void> {}\r\n\r\n    deactivate(actions: ITransitionActions): void | Promise<void> {}\r\n\r\n    destroy(actions: ITransitionActions): void | Promise<void> {}\r\n}\r\n","import {ISystemActions} from \"./world\";\r\nimport {ISystem} from \"./system.spec\";\r\nimport {IAccessQuery, Query} from \"./query\";\r\nimport {TTypeProto} from \"./_.spec\";\r\n\r\nexport * from './system.spec';\r\n\r\nexport abstract class System implements ISystem {\r\n    readonly query?: Query<IAccessQuery<TTypeProto<Object>>>;\r\n\r\n    destroy(actions: ISystemActions): void | Promise<void> {}\r\n\r\n    abstract run(actions: ISystemActions): void | Promise<void>;\r\n\r\n    setup(actions: ISystemActions): void | Promise<void> {}\r\n}\r\n","import {\r\n    IComponentRegistrationOptions,\r\n    IWorldBuilder,\r\n} from \"./world-builder.spec\";\r\nimport {System, TSystemProto} from \"./system\";\r\nimport {IWorld, ISystemInfo, World} from \"./world\";\r\nimport {TObjectProto} from \"./_.spec\";\r\nimport {SerDe} from \"./serde/serde\";\r\nimport ECS from \"./ecs\";\r\n\r\nexport class WorldBuilder implements IWorldBuilder {\r\n    protected callbacks: Set<(world: IWorld) => void> = new Set();\r\n    protected serde = new SerDe();\r\n    protected systemInfos = new Map<TSystemProto, ISystemInfo>();\r\n\r\n    constructor(\r\n        protected ecs: ECS,\r\n    ) {}\r\n\r\n    addCallback(cb: (world: IWorld) => void): WorldBuilder {\r\n        this.callbacks.add(cb);\r\n        return this;\r\n    }\r\n\r\n    build(): IWorld {\r\n        const world = new World(this.ecs, new Set(this.systemInfos.values()), this.serde);\r\n\r\n        for (const cb of this.callbacks) {\r\n            cb(world);\r\n        }\r\n\r\n        return world;\r\n    }\r\n\r\n    withSystem(System: TSystemProto, dependencies?: TSystemProto[]): WorldBuilder {\r\n        if (this.systemInfos.has(System)) {\r\n            throw new Error(`The system ${System.constructor.name} is already registered!`);\r\n        }\r\n\r\n        this.systemInfos.set(System, {\r\n            system: new System() as System,\r\n            dependencies: new Set(dependencies),\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    withComponent(Component: TObjectProto, options?: IComponentRegistrationOptions): WorldBuilder {\r\n        this.serde.registerTypeHandler(\r\n            Component,\r\n            options?.serDe?.deserializer ?? dataStructDeserializer.bind(undefined, Component),\r\n            options?.serDe?.serializer ?? dataStructSerializer\r\n        );\r\n\r\n        return this;\r\n    }\r\n\r\n    withComponents(...Components: TObjectProto[]): IWorldBuilder {\r\n        for (const Component of Components) {\r\n            this.withComponent(Component);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n// todo: read the Constructor parameters in order to throw early if a field is missing\r\nfunction dataStructDeserializer(Constructor: TObjectProto, data: unknown): Object {\r\n    if (typeof data != 'object') {\r\n        throw new Error(`Cannot default-deserialize ${Constructor.name}, because the data is of type ${typeof data}!`);\r\n    }\r\n\r\n    const obj: { [key: string]: any } = new Constructor();\r\n\r\n    for (const kv of Object.entries(data as Object)) {\r\n        obj[kv[0]] = kv[1];\r\n    }\r\n\r\n    return obj;\r\n}\r\n\r\nfunction dataStructSerializer(component: unknown): unknown {\r\n    return component;\r\n}\r\n\r\nexport const _ = {\r\n    dataStructDeserializer,\r\n    dataStructSerializer,\r\n};\r\n","import {Entity} from \"./entity\";\r\nimport {EntityBuilder} from \"./entity-builder\";\r\nimport {\r\n    IRunConfiguration,\r\n    IStaticRunConfiguration,\r\n    ISystemActions, ISystemInfo,\r\n    ITransitionActions,\r\n    IWorld,\r\n    TGroupHandle\r\n} from \"./world.spec\";\r\nimport {IEntity} from \"./entity.spec\";\r\nimport {IState, State, TStateProto} from \"./state\";\r\nimport {TTypeProto} from \"./_.spec\";\r\nimport {PushDownAutomaton} from \"./pda\";\r\nimport {SerDe, TDeserializer, TSerDeOptions, TSerializer} from \"./serde/serde\";\r\nimport {ISerialFormat} from \"./serde/serial-format\";\r\nimport ECS from \"./ecs\";\r\nimport {Commands} from \"./commands/commands\";\r\nimport {CommandsAggregator} from \"./commands/commands-aggregator\";\r\nimport {ISystem, System, TSystemProto} from \"./system\";\r\nimport {\r\n    IAccessDescriptor,\r\n    IAccessQuery,\r\n    setEntitiesSym,\r\n    TExistenceQuery,\r\n    Query\r\n} from \"./query\";\r\n\r\nexport * from './world.spec';\r\n\r\nexport class World implements IWorld {\r\n    protected _commandsAggregator: CommandsAggregator;\r\n    protected _commands: Commands;\r\n    protected _dirty = false;\r\n    public entities: Set<IEntity> = new Set();\r\n    protected pda = new PushDownAutomaton<IState>();\r\n    private lastRunPreparation?: IStaticRunConfiguration;\r\n    public groups = {\r\n        nextHandle: 0,\r\n        entityLinks: new Map<number, IEntity[]>(),\r\n    };\r\n    protected queries: Query<IAccessQuery<TTypeProto<Object>>>[] = [];\r\n    public resources = new Map<{ new(): Object }, Object>();\r\n    protected runExecutionPipeline: Set<System>[] = [];\r\n    protected runExecutionPipelineCache: Map<TStateProto, Set<System>[]> = new Map();\r\n    protected runPromise?: Promise<void> = undefined;\r\n    protected shouldRunSystems = false;\r\n    protected sortedSystems: Set<ISystemInfo>;\r\n    protected systemWorld: ISystemActions;\r\n    protected transitionWorld: ITransitionActions;\r\n\r\n    constructor(\r\n        public ecs: ECS,\r\n        public systemInfos: Set<ISystemInfo> = new Set(),\r\n        protected _serde: SerDe = new SerDe(),\r\n    ) {\r\n        const self = this;\r\n\r\n        this._commandsAggregator = new CommandsAggregator(this);\r\n        this._commands = new Commands(this, this._commandsAggregator);\r\n\r\n        this.systemWorld = Object.freeze({\r\n            get commands() {\r\n                return self._commands;\r\n            },\r\n            get currentState(): IState | undefined {\r\n                return self.pda.state;\r\n            },\r\n            getEntities: this.getEntities.bind(this),\r\n            getResource: this.getResource.bind(this),\r\n        });\r\n\r\n        this.transitionWorld = Object.freeze({\r\n            get commands() {\r\n                return self._commands;\r\n            },\r\n            get currentState() {\r\n                return self.pda.state;\r\n            },\r\n            get serde() {\r\n                return self.serde;\r\n            },\r\n            buildEntity: this.buildEntity.bind(this),\r\n            flushCommands: this.flushCommands.bind(this),\r\n            getEntities: this.getEntities.bind(this),\r\n            getResource: this.getResource.bind(this),\r\n            getResources: this.getResources.bind(this),\r\n            maintain: this.maintain.bind(this),\r\n            save: this.save.bind(this),\r\n        });\r\n\r\n        this.sortedSystems = this.sortSystems(this.systemInfos);\r\n\r\n        for (const systemInfo of this.systemInfos) {\r\n            if (systemInfo.system.query) {\r\n                this.queries.push(systemInfo.system.query);\r\n            }\r\n        }\r\n    }\r\n\r\n    get commands() {\r\n        return this._commands;\r\n    }\r\n\r\n    get dirty() {\r\n        return this._dirty;\r\n    }\r\n\r\n    get running() {\r\n        return this.shouldRunSystems;\r\n    }\r\n\r\n    get serde() {\r\n        return this._serde;\r\n    }\r\n\r\n    addEntity(entity: IEntity) {\r\n        if (!this.entities.has(entity)) {\r\n            this.entities.add(entity);\r\n            this._dirty = true;\r\n        }\r\n    }\r\n\r\n    addResource<T extends Object>(obj: T | TTypeProto<T>, ...args: unknown[]) {\r\n        let type: TTypeProto<T>;\r\n        let instance: T;\r\n\r\n        if (typeof obj === 'object') {\r\n            type = obj.constructor as TTypeProto<T>;\r\n            instance = obj;\r\n        } else {\r\n            type = obj;\r\n            instance = new (obj.prototype.constructor.bind(obj, ...Array.from(arguments).slice(1)))();\r\n        }\r\n\r\n        if (this.resources.has(type)) {\r\n            throw new Error(`Resource with name \"${type.name}\" already exists!`);\r\n        }\r\n\r\n        this.resources.set(type, instance);\r\n        return instance;\r\n    }\r\n\r\n    buildEntity(): EntityBuilder {\r\n        return new EntityBuilder();\r\n    }\r\n\r\n    clearEntities() {\r\n        this.entities.clear();\r\n    }\r\n\r\n    createEntity(): Entity {\r\n        const entity = new Entity();\r\n        this.entities.add(entity);\r\n        this._dirty = true;\r\n        return entity;\r\n    }\r\n\r\n    async dispatch(state?: TStateProto): Promise<void> {\r\n        await this.run({\r\n            initialState: state,\r\n            afterStepHandler: actions => actions.commands.stopRun(),\r\n        });\r\n    }\r\n\r\n    flushCommands() {\r\n        return this._commandsAggregator.executeAll();\r\n    }\r\n\r\n    getEntities(query?: Query<IAccessQuery<TTypeProto<Object>> | TExistenceQuery<TTypeProto<Object>>>): IterableIterator<IEntity> {\r\n        if (!query) {\r\n            return this.entities.keys();\r\n        }\r\n\r\n        const resultEntities = new Set<IEntity>();\r\n        let entity;\r\n\r\n        for (entity of this.entities.keys()) {\r\n            if (query.matchesEntity(entity)) {\r\n                resultEntities.add(entity);\r\n            }\r\n        }\r\n\r\n        return resultEntities.values();\r\n    }\r\n\r\n    getResource<T extends Object>(type: TTypeProto<T>): T {\r\n        if (!this.resources.has(type)) {\r\n            throw new Error(`Resource of type \"${type.name}\" does not exist!`);\r\n        }\r\n\r\n        return this.resources.get(type) as T;\r\n    }\r\n\r\n    getResources(): IterableIterator<unknown> {\r\n        return this.resources.values();\r\n    }\r\n\r\n    load(prefab: ISerialFormat, options?: TSerDeOptions<TDeserializer>, intoGroup?: TGroupHandle): TGroupHandle {\r\n        const entities = [];\r\n        const groupHandle = intoGroup ?? this.groups.nextHandle++;\r\n        let entity: IEntity;\r\n\r\n        for (entity of this._serde.deserialize(prefab, options).entities) {\r\n            this.addEntity(entity);\r\n            entities.push(entity);\r\n        }\r\n\r\n        this.groups.entityLinks.set(groupHandle, entities);\r\n        return groupHandle;\r\n    }\r\n\r\n    // todo: add parameter which only maintains for a specific state\r\n    // todo: maybe use a change-log to only maintain real changes instead of everything\r\n    maintain(): void {\r\n        let query;\r\n        for (query of this.queries) {\r\n            query[setEntitiesSym](this.entities.values());\r\n        }\r\n\r\n        this._dirty = false;\r\n    }\r\n\r\n    merge(elsewhere: IWorld, intoGroup?: TGroupHandle): [TGroupHandle, IEntity[]] {\r\n        const groupHandle = intoGroup ?? this.groups.nextHandle++;\r\n        const entities = [];\r\n        let entity;\r\n\r\n        for (entity of elsewhere.getEntities()) {\r\n            this.addEntity(entity);\r\n            entities.push(entity);\r\n        }\r\n\r\n        return [groupHandle, entities];\r\n    }\r\n\r\n    async popState(): Promise<void> {\r\n        await this.pda.pop()?.deactivate(this.transitionWorld);\r\n\r\n        const newState = this.pda.state;\r\n        if (!newState) {\r\n            this.runExecutionPipeline = [];\r\n            return;\r\n        }\r\n\r\n        await newState.activate(this.transitionWorld);\r\n        this.runExecutionPipeline = this.runExecutionPipelineCache.get(newState.constructor as TStateProto) ?? [];\r\n    }\r\n\r\n    // todo: improve logic which sets up the groups (tracked by #13)\r\n    protected prepareExecutionPipeline(state: IState): Set<ISystem>[] {\r\n        // todo: this could be further optimized by allowing systems with dependencies to run in parallel\r\n        //    if all of their dependencies already ran\r\n\r\n        // todo: also, if two systems depend on the same components, they may run in parallel\r\n        //    if they only require READ access\r\n        const result: Set<ISystem>[] = [];\r\n        const stateSystems = state.systems;\r\n        let executionGroup: Set<ISystem> = new Set();\r\n        let shouldRunSystem;\r\n        let systemInfo: ISystemInfo;\r\n\r\n        if (this.sortedSystems.size == 0) {\r\n            this.sortSystems(this.systemInfos);\r\n        }\r\n\r\n        for (systemInfo of this.sortedSystems) {\r\n            shouldRunSystem = !!stateSystems.find(stateSys => stateSys.prototype.constructor.name === systemInfo.system.constructor.name);\r\n\r\n            if (shouldRunSystem) {\r\n                if (systemInfo.dependencies.size > 0) {\r\n                    result.push(executionGroup);\r\n                    executionGroup = new Set<ISystem>();\r\n                }\r\n\r\n                executionGroup.add(systemInfo.system);\r\n            }\r\n        }\r\n\r\n        result.push(executionGroup);\r\n        return result;\r\n    }\r\n\r\n    async pushState(NewState: TStateProto): Promise<void> {\r\n        await this.pda.state?.deactivate(this.transitionWorld);\r\n        this.pda.push(NewState);\r\n\r\n        const newState = this.pda.state!;\r\n        const registeredSystemNames = Array.from(this.systemInfos).map(nfo => nfo.system.constructor.name);\r\n\r\n        for (const system of newState.systems) {\r\n            if (!registeredSystemNames.includes(system.name)) {\r\n                // cannot infer dependencies, so we have to throw :/\r\n                throw new Error(`Did you forget to register System ${system.name}?`);\r\n            }\r\n        }\r\n\r\n        if (this.runExecutionPipelineCache.has(NewState)) {\r\n            this.runExecutionPipeline = this.runExecutionPipelineCache.get(NewState) ?? [];\r\n        } else {\r\n            newState.create(this.transitionWorld);\r\n            this.runExecutionPipeline = this.prepareExecutionPipeline(newState);\r\n            this.runExecutionPipelineCache.set(NewState, this.runExecutionPipeline);\r\n        }\r\n\r\n        await newState.activate(this.transitionWorld);\r\n    }\r\n\r\n    public async prepareRun(configuration?: IRunConfiguration): Promise<IStaticRunConfiguration> {\r\n        if (this.runPromise) {\r\n            throw new Error('The dispatch loop is already running!');\r\n        }\r\n\r\n        if (this._dirty) {\r\n            this.maintain();\r\n        }\r\n\r\n        configuration ||= {};\r\n\r\n        const initialState = configuration.initialState\r\n            ? configuration.initialState\r\n            : State.bind(undefined, Array.from(this.systemInfos.values()).map(systemInfo => systemInfo.system.constructor as TSystemProto));\r\n        const runConfig: IStaticRunConfiguration = {\r\n            afterStepHandler: configuration.afterStepHandler ?? (_action => {}),\r\n            beforeStepHandler: configuration.beforeStepHandler ?? (_action => {}),\r\n            executionFunction: configuration.executionFunction ?? (typeof requestAnimationFrame == 'function'\r\n                ? requestAnimationFrame\r\n                : setTimeout),\r\n            initialState,\r\n        };\r\n\r\n        this.pda.clear();\r\n        this.shouldRunSystems = true;\r\n\r\n        for (const systemInfo of this.systemInfos) {\r\n            await systemInfo.system.setup(this.systemWorld);\r\n        }\r\n\r\n        await this.pushState(initialState);\r\n        this.runExecutionPipeline = this.prepareExecutionPipeline(this.pda.state!);\r\n\r\n        this.lastRunPreparation = runConfig;\r\n        return runConfig;\r\n    }\r\n\r\n    removeEntity(entity: IEntity): void {\r\n        this.entities.delete(entity);\r\n        this._dirty = true;\r\n    }\r\n\r\n    removeEntityFromSystems(entity: IEntity): void {\r\n        this.removeEntity(entity);\r\n        this.maintain();\r\n    }\r\n\r\n    replaceEntitiesWith(world: IWorld) {\r\n        this.clearEntities();\r\n        this.merge(world);\r\n    }\r\n\r\n    replaceResource<T extends Object>(obj: T | TTypeProto<T>, ...args: unknown[]) {\r\n        let type: TTypeProto<T>;\r\n\r\n        if (typeof obj === 'object') {\r\n            type = obj.constructor as TTypeProto<T>;\r\n        } else {\r\n            type = obj;\r\n        }\r\n\r\n        if (!this.resources.has(type)) {\r\n            throw new Error(`Resource with name \"${type.name}\" does not exists!`);\r\n        }\r\n\r\n        this.resources.delete(type);\r\n        this.addResource(obj, ...args);\r\n    }\r\n\r\n    removeResource<T extends Object>(type: TTypeProto<T>) {\r\n        if (!this.resources.has(type)) {\r\n            throw new Error(`Resource with name \"${type.name}\" does not exists!`);\r\n        }\r\n\r\n        this.resources.delete(type);\r\n    }\r\n\r\n    run(configuration?: IRunConfiguration, skipPreparation: boolean = false): Promise<void> {\r\n        const runPromise = new Promise<void>(async resolver => {\r\n            let preparedConfig: IStaticRunConfiguration;\r\n\r\n            await this._commandsAggregator.executeAll();\r\n\r\n            if (!skipPreparation) {\r\n                preparedConfig = await this.prepareRun(configuration);\r\n            }\r\n            else {\r\n                preparedConfig = this.lastRunPreparation!;\r\n            }\r\n\r\n            if (!preparedConfig) {\r\n                throw new Error('Cannot run without preparing the run!');\r\n            }\r\n\r\n            this.runPromise = runPromise;\r\n\r\n            const afterStepHandler = preparedConfig.afterStepHandler;\r\n            const beforeStepHandler = preparedConfig.beforeStepHandler;\r\n            const execFn = preparedConfig.executionFunction;\r\n            let systemPromises;\r\n\r\n            const cleanUp = async () => {\r\n                await this.pda.state?.deactivate(this.transitionWorld);\r\n                for (let state = this.pda.pop(); !!state; state = this.pda.pop()) {\r\n                    await state.destroy(this.transitionWorld);\r\n                }\r\n\r\n                for (const systemInfo of this.systemInfos) {\r\n                    await systemInfo.system.destroy(this.systemWorld);\r\n                }\r\n\r\n                this.runExecutionPipelineCache.clear();\r\n                this.runPromise = undefined;\r\n                resolver();\r\n            };\r\n\r\n            const mainLoop = async () => {\r\n                if (!this.shouldRunSystems) {\r\n                    await cleanUp();\r\n                    return;\r\n                }\r\n\r\n                await beforeStepHandler(this.transitionWorld);\r\n\r\n                {\r\n                    let executionGroup;\r\n                    let system;\r\n                    for (executionGroup of this.runExecutionPipeline) {\r\n                        systemPromises = [];\r\n                        for (system of executionGroup) {\r\n                            systemPromises.push(system.run(this.systemWorld));\r\n                        }\r\n\r\n                        await Promise.all(systemPromises);\r\n                    }\r\n                }\r\n\r\n                await afterStepHandler(this.transitionWorld);\r\n                await this._commandsAggregator.executeAll();\r\n                execFn(mainLoop);\r\n            }\r\n\r\n            execFn(mainLoop);\r\n        });\r\n\r\n        return runPromise;\r\n    }\r\n\r\n    protected sortSystems(unsorted: Set<ISystemInfo>): Set<ISystemInfo> {\r\n        const unsortedArr = Array.from(unsorted);\r\n        const graph = new Map(unsortedArr.map(node => [node.system.constructor as TSystemProto, Array.from(node.dependencies)]));\r\n        let edges: TSystemProto[];\r\n\r\n        /// toposort with Kahn\r\n        /// https://en.wikipedia.org/wiki/Topological_sorting#Kahn's_algorithm\r\n        const L: TSystemProto[] = []; // Empty list that will contain the sorted elements\r\n        const S = Array.from(graph.entries()).filter(pair => pair[1].length === 0).map(pair => pair[0]); // Set of all nodes with no incoming edge\r\n        let n: TSystemProto;\r\n\r\n        // while S is non-empty do\r\n        while (S.length > 0) {\r\n            // remove a node n from S\r\n            n = S.shift() as TSystemProto;\r\n            // add n to tail of L\r\n            L.push(n);\r\n\r\n            // for each node m with an edge e from n to m do\r\n            for (let m of Array.from(graph.entries()).filter(pair => pair[1].includes(n)).map(pair => pair[0])) {\r\n                // remove edge e from the graph\r\n                edges = graph.get(m) as TSystemProto[];\r\n                edges.splice(edges.indexOf(n), 1);\r\n\r\n                // if m has no other incoming edges then\r\n                if (edges.length <= 0) {\r\n                    // insert m into S\r\n                    S.push(m);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (Array.from(graph.values()).find(n => n.length > 0)) {\r\n            throw new Error('The system dependency graph is cyclic!');\r\n        }\r\n\r\n        let obj;\r\n        return new Set(L.map(t => {\r\n            obj = unsortedArr.find(n => n.system.constructor == t);\r\n\r\n            if (!obj) {\r\n                throw new Error(`The system ${t.name} was not registered!`);\r\n            }\r\n\r\n            return obj;\r\n        }));\r\n    }\r\n\r\n    stopRun() {\r\n        this.shouldRunSystems = false;\r\n    }\r\n\r\n    save<C extends Object, T extends IAccessDescriptor<C>>(query?: Query<TExistenceQuery<TTypeProto<Object>>>, options?: TSerDeOptions<TSerializer>): ISerialFormat {\r\n        return this.serde.serialize({entities: this.getEntities(query)}, options);\r\n    }\r\n\r\n    unloadPrefab(handle: TGroupHandle) {\r\n        if (!this.groups.entityLinks.has(handle)) {\r\n            throw new Error(`Could not find any loaded prefab under handle \"${handle}\"!`)\r\n        }\r\n\r\n        let entity;\r\n        for (entity of this.groups.entityLinks.get(handle)!) {\r\n            this.removeEntity(entity);\r\n        }\r\n\r\n        this.groups.entityLinks.delete(handle);\r\n    }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n"],"names":["constructor","commands","entity","Entity","build","this","aggregator","addCommand","world","addEntity","with","component","args","addComponent","asComponent","withAll","components","prototype","bind","Array","from","arguments","slice","doMaintain","command","push","shift","maintain","triggerMaintain","addResource","obj","type","instance","resources","has","Error","name","set","buildEntity","CommandEntityBuilder","clearEntities","entities","clear","load","prefab","options","handle","groups","nextHandle","merge","popState","pushState","NewState","queueCommand","removeEntity","removeResource","delete","replaceResource","stopRun","unloadPrefab","ECS","worlds","Map","buildWorld","WorldBuilder","addCallback","removeWorld","tags","Set","hasComponent","addTag","tag","add","getComponent","get","getComponents","values","getTags","hasTag","removeComponent","removeTag","currentState","undefined","statesTail","pop","oldTail","prevNode","state","State","Query","queryDescriptor","queryResult","addEntitySym","matchesEntity","isArray","getDataFromEntity","clearEntitiesSym","removeEntitySym","setEntitiesSym","execute","handler","data","descriptor","componentDesc","Object","entries","accessDescSym","EAccess","meta","targetType","ETargetType","target","iter","getEntities","existenceDescSym","EExistence","assign","componentPrototype","read","write","unset","Symbol","getDefaultSerializer","customSerializer","componentName","getTime","JSON","stringify","toString","getDefaultDeserializer","customDeserializer","constructorName","toLowerCase","Date","typeHandlers","deserialize","finalOptions","useDefaultHandler","useRegisteredHandlers","fallbackHandler","serialComponentData","serialComponentName","serialEntity","deserializer","CTagMarker","includes","getRegisteredTypeHandlers","registerTypeHandler","Type","serializer","serialize","outData","SerialFormat","serialData","length","arr","fromArray","json","fromJSON","newVals","parse","toJSON","indentation","_systems","activate","actions","create","deactivate","destroy","setup","dataStructDeserializer","Constructor","kv","dataStructSerializer","ecs","callbacks","serde","SerDe","systemInfos","cb","World","withSystem","System","dependencies","system","withComponent","Component","serDe","withComponents","Components","_","_serde","_dirty","pda","PushDownAutomaton","entityLinks","queries","runExecutionPipeline","runExecutionPipelineCache","runPromise","shouldRunSystems","self","_commandsAggregator","CommandsAggregator","_commands","Commands","systemWorld","freeze","getResource","transitionWorld","flushCommands","getResources","save","sortedSystems","sortSystems","systemInfo","query","EntityBuilder","createEntity","run","initialState","afterStepHandler","executeAll","keys","resultEntities","intoGroup","groupHandle","elsewhere","newState","prepareExecutionPipeline","result","stateSystems","systems","shouldRunSystem","executionGroup","size","find","stateSys","registeredSystemNames","map","nfo","configuration","runConfig","_action","beforeStepHandler","executionFunction","requestAnimationFrame","setTimeout","lastRunPreparation","removeEntityFromSystems","replaceEntitiesWith","skipPreparation","Promise","async","resolver","preparedConfig","prepareRun","execFn","systemPromises","cleanUp","mainLoop","all","unsorted","unsortedArr","graph","node","edges","L","S","filter","pair","n","m","splice","indexOf","t","extendStatics","d","b","setPrototypeOf","__proto__","p","hasOwnProperty","call","__extends","TypeError","String","__","__assign","s","i","apply","__rest","e","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","resolve","reject","fulfilled","value","step","next","rejected","done","then","__generator","body","f","y","g","label","sent","trys","ops","verb","iterator","v","op","__createBinding","o","k","k2","enumerable","__exportStar","__values","__read","ar","error","__spread","concat","__spreadArrays","il","a","j","jl","__spreadArray","to","pack","l","__await","__asyncGenerator","asyncIterator","q","resume","fulfill","settle","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__setModuleDefault","__importStar","mod","__esModule","__importDefault","default","__classPrivateFieldGet","receiver","kind","__classPrivateFieldSet"],"sourceRoot":""}