{"version":3,"sources":["webpack://excalibur-webpack/webpack/runtime/chunk loaded","webpack://excalibur-webpack/./res/excalibot.png","webpack://excalibur-webpack/./res/excalibot-red.png","webpack://excalibur-webpack/./res/baddie.png","webpack://excalibur-webpack/./res/block.png","webpack://excalibur-webpack/./res/npc.png","webpack://excalibur-webpack/./res/jump.wav","webpack://excalibur-webpack/./res/hurt.wav","webpack://excalibur-webpack/./res/gottem.wav","webpack://excalibur-webpack/./res/TX Tileset Grass.png","webpack://excalibur-webpack/./src/resources.ts","webpack://excalibur-webpack/./src/common/helpers.ts","webpack://excalibur-webpack/./src/bot.ts","webpack://excalibur-webpack/./src/baddie.ts","webpack://excalibur-webpack/./src/city/Brick.ts","webpack://excalibur-webpack/./src/floor.ts","webpack://excalibur-webpack/./src/npc.ts","webpack://excalibur-webpack/./src/level.ts","webpack://excalibur-webpack/./src/index.ts","webpack://excalibur-webpack/webpack/bootstrap","webpack://excalibur-webpack/webpack/runtime/global","webpack://excalibur-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://excalibur-webpack/webpack/runtime/publicPath","webpack://excalibur-webpack/webpack/runtime/jsonp chunk loading","webpack://excalibur-webpack/webpack/startup"],"names":["deferred","Resources","bot","Texture","botRed","baddie","block","npc","jump","Sound","hit","gotEm","grass","loader","Loader","botSpriteSheet","SpriteSheet","botRedSpriteSheet","baddieSpriteSheet","blockSprite","asSprite","npcSprite","grassSpriteSheet","res","addResource","cols","x","y","pos","Vector","body","Body","collider","Collider","type","CollisionType","shape","Shape","offset","group","CollisionGroupManager","isJumping","isJumpFirstCross","jumpY","hurt","hurtTime","isLeft","onInitialize","engine","hurtleft","getAnimationByIndices","scale","hurtright","flipHorizontal","idleLeft","idleRight","left","right","this","addDrawing","on","onPostCollision","evt","side","Side","other","Baddie","vel","setDrawing","play","getMoveDir","vec","input","keyboard","isHeld","Input","normalize","onPreUpdate","delta","acc","moveDir","scaleEqual","Actor","dir","actions","moveBy","repeatForever","Bot","clearActions","Physics","rx","onPostUpdate","idx","columns","col","row","rows","minCol","maxCol","minRow","maxRow","randomCol","anchor","spWidth","spHeight","indicies","i","j","index","Math","floor","random","push","onPostDraw","ctx","getSprite","draw","drawWidth","drawHeight","onGround","z","idle","backgroundColor","Color","actor","baddie2","NPC","Brick","add","otherFloor","Floor","camera","clearAllStrategies","strategy","elasticToActor","zoom","Scene","Engine","displayMode","DisplayMode","setAntialiasing","Level","goToScene","console","log","start","then","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","length","fulfilled","Object","keys","every","key","splice","r","g","globalThis","Function","e","window","o","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","Error","replace","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"mappings":"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","file":"main.js","sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","export default __webpack_public_path__ + \"9b8606ea9f0f4b78b4cd7ce817564074.png\";","export default __webpack_public_path__ + \"bd99eb41ea5cc3d44e26b5d2809fce41.png\";","export default __webpack_public_path__ + \"cf46998813a16deda5b1df84e8ba4a58.png\";","export default __webpack_public_path__ + \"5f7dc58022982b36f3e7f336df2e1fe3.png\";","export default __webpack_public_path__ + \"61977b58651acbc9a3245a94f185238b.png\";","export default __webpack_public_path__ + \"8934b41ac754a9dbdf0fdfffa1807d52.wav\";","export default __webpack_public_path__ + \"d292f5f80075fd4216d6da8d459f64c5.wav\";","export default __webpack_public_path__ + \"81bc95ba9d9e1dca2626111d8282fc01.wav\";","export default __webpack_public_path__ + \"0237cbdaf14a8ac95dd35a9934987b23.png\";","import {Loader, Sound, SpriteSheet, Texture} from 'excalibur';\n\nimport botFile from '../res/excalibot.png';\nimport botRedFile from '../res/excalibot-red.png';\nimport baddieFile from '../res/baddie.png';\nimport blockFile from '../res/block.png';\nimport npcFile from '../res/npc.png';\nimport jumpSound from '../res/jump.wav';\nimport hitSound from '../res/hurt.wav';\nimport gotEmSound from '../res/gottem.wav';\n\nimport grassFile from '../res/TX Tileset Grass.png';\n\nconst Resources = {\n    bot: new Texture(botFile),\n    botRed: new Texture(botRedFile),\n    baddie: new Texture(baddieFile),\n    block: new Texture(blockFile),\n    npc: new Texture(npcFile),\n    jump: new Sound(jumpSound),\n    hit: new Sound(hitSound),\n    gotEm: new Sound(gotEmSound),\n    \n    grass: new Texture(grassFile),\n}\n\nconst loader = new Loader();\n\nconst botSpriteSheet = new SpriteSheet(Resources.bot, 8, 1, 32, 32);\nconst botRedSpriteSheet = new SpriteSheet(Resources.botRed, 8, 1, 32, 32);\nconst baddieSpriteSheet = new SpriteSheet(Resources.baddie, 6, 1, 32, 32);\nconst blockSprite = Resources.block.asSprite();\nconst npcSprite = Resources.npc.asSprite();\n\nconst grassSpriteSheet = new SpriteSheet(Resources.grass, 8, 8, 32, 32);\n// const font = new Font(Resources.font);\n\nfor (const res in Resources) {\n    loader.addResource((Resources as any)[res]);\n}\n\nexport {\n    Resources,\n    loader,\n    botSpriteSheet,\n    botRedSpriteSheet,\n    baddieSpriteSheet,\n    blockSprite,\n    npcSprite,\n    grassSpriteSheet,\n    // font,\n};","export const indexByColRow = (cols:number) => (\n    (col:number, row:number): number => (cols * row + col)\n);\n\nexport const getRandomIndex = (length: number) => Math.floor(Math.random()*length);\n\nexport const getRandomSprite = (minCol: number, maxCol: number, minRow: number, maxRow: number) => {\n    const randomCol = Math.floor(Math.random() * (maxCol - minCol)) + minCol;\n    const randomRow = Math.floor(Math.random() * (maxRow - minRow)) + minRow;\n\n    return randomRow * (maxCol - minCol) + randomCol;\n};","import { botSpriteSheet, Resources } from \"./resources\";\nimport { Baddie } from \"./baddie\";\nimport {\n  Actor,\n  Body,\n  Collider,\n  CollisionGroupManager,\n  CollisionType,\n  Engine,\n  Input,\n  PostCollisionEvent,\n  Shape,\n  Side,\n  Vector,\n} from \"excalibur\";\n\nexport class Bot extends Actor {\n  \n  public isJumping = false;\n  public isJumpFirstCross = true;\n  public jumpY = 0;\n\n  public hurt = false;\n  public hurtTime: number = 0;\n\n  public isLeft = false;\n\n  constructor(x: number, y: number) {\n    super({\n      pos: new Vector(x, y),\n      body: new Body({\n        collider: new Collider({\n          type: CollisionType.Active,\n          shape: Shape.Box(32, 50),\n          offset: new Vector(0, 3),\n          group: CollisionGroupManager.groupByName(\"player\"),\n        }),\n      }),\n    });\n  }\n\n  // OnInitialize is called before the 1st actor update\n  onInitialize(engine: Engine) {\n    // Initialize actor\n\n    // Setup visuals, retrieve animations from sprite sheets\n    const hurtleft = botSpriteSheet.getAnimationByIndices(\n      engine,\n      [0, 1, 0, 1, 0, 1],\n      150\n    );\n    hurtleft.scale = new Vector(2, 2);\n\n    const hurtright = botSpriteSheet.getAnimationByIndices(\n      engine,\n      [0, 1, 0, 1, 0, 1],\n      150\n    );\n    hurtright.scale = new Vector(2, 2);\n    hurtright.flipHorizontal = true;\n\n    const idleLeft = botSpriteSheet.getAnimationByIndices(engine, [2, 3], 800);\n    idleLeft.scale = new Vector(2, 2);\n\n    const idleRight = botSpriteSheet.getAnimationByIndices(engine, [2, 3], 800);\n    idleRight.scale = new Vector(2, 2);\n    idleRight.flipHorizontal = true;\n\n    const left = botSpriteSheet.getAnimationByIndices(\n      engine,\n      [3, 4, 5, 6, 7],\n      100\n    );\n    left.scale = new Vector(2, 2);\n\n    const right = botSpriteSheet.getAnimationByIndices(\n      engine,\n      [3, 4, 5, 6, 7],\n      100\n    );\n    right.scale = new Vector(2, 2);\n    right.flipHorizontal = true;\n\n    // Register animations with actor\n    this.addDrawing(\"hurtleft\", hurtleft);\n    this.addDrawing(\"hurtright\", hurtright);\n    this.addDrawing(\"idleLeft\", idleLeft);\n    this.addDrawing(\"idleRight\", idleRight);\n    this.addDrawing(\"left\", left);\n    this.addDrawing(\"right\", right);\n\n    // onPostCollision is an event, not a lifecycle meaning it can be subscribed to by other things\n    this.on(\"postcollision\", this.onPostCollision);\n  }\n\n  onPostCollision(evt: PostCollisionEvent) {\n    // Bot has collided with the top of another collider\n    if (evt.side === Side.Top) {\n      // this.onGround = true;\n    }\n\n    // Bot has collided on the side, display hurt animation\n    if (\n      (evt.side === Side.Left || evt.side === Side.Right) &&\n      evt.other instanceof Baddie\n    ) {\n      if (this.vel.x < 0 && !this.hurt) {\n        this.setDrawing(\"hurtleft\");\n      }\n      if (this.vel.x >= 0 && !this.hurt) {\n        this.setDrawing(\"hurtright\");\n      }\n      this.hurt = true;\n      this.hurtTime = 1000;\n      Resources.hit.play(0.1);\n    }\n  }\n\n  getMoveDir(engine: Engine) {\n    const vec = new Vector(0, 0);\n\n    if (engine.input.keyboard.isHeld(Input.Keys.Left)) {\n      vec.x = -1;\n    }\n\n    if (engine.input.keyboard.isHeld(Input.Keys.Right)) {\n      vec.x = 1;\n    }\n\n    if (engine.input.keyboard.isHeld(Input.Keys.Up)) {\n      vec.y = -1;\n    }\n\n    if (engine.input.keyboard.isHeld(Input.Keys.Down)) {\n      vec.y = 1;\n    }\n\n    vec.normalize();\n\n    return vec;\n  }\n\n  // After main update, once per frame execute this code\n  onPreUpdate(engine: Engine, delta: number) {\n    // If hurt, count down\n    if (this.hurtTime >= 0 && this.hurt) {\n      this.hurtTime -= delta;\n      if (this.hurtTime < 0) {\n        this.hurt = false;\n      }\n    }\n\n    if (this.pos.y - this.jumpY >= 0.00000000001 && this.isJumping) {\n      this.isJumping = false;\n      this.pos.y = this.jumpY;\n      this.acc = Vector.Zero;\n    }\n\n    const moveDir = this.getMoveDir(engine);\n    moveDir.scaleEqual(150);\n\n    if (this.isJumping) {\n      moveDir.scaleEqual(0.5);\n      moveDir.y = this.vel.y;\n    }\n\n    this.vel = moveDir;\n\n    if (engine.input.keyboard.isHeld(Input.Keys.Space) && !this.isJumping) {\n      this.vel.y = -300;\n      this.acc = new Vector(0, 980);\n      this.isJumping = true;\n      this.jumpY = this.pos.y;\n      this.isJumpFirstCross = true;\n      Resources.jump.play(1.0);\n    }\n\n    if (this.vel.x < 0) {\n      this.isLeft = true;\n    }\n    else if (this.vel.x > 0) {\n      this.isLeft = false;\n    }\n\n    if (!this.hurt) {\n      if (this.isLeft) {\n        this.setDrawing(\"left\");\n      }\n      else {\n        this.setDrawing(\"right\");\n      }\n      if (this.vel.x === 0 ) {\n        if (this.isLeft) {\n          this.setDrawing(\"idleLeft\");\n        }\n        else {\n          this.setDrawing(\"idleRight\");\n        } \n      }\n    }\n  }\n}\n","import {\n  Actor, Vector, CollisionType,\n  Collider,\n  Body,\n  Shape,\n  CollisionGroupManager,\n  Engine,\n  Physics,\n  PostCollisionEvent,\n  Side\n} from 'excalibur';\nimport { baddieSpriteSheet, Resources } from \"./resources\";\nimport { Bot } from './bot';\n\nexport class Baddie extends Actor {\n  constructor(x: number, y: number, public dir: number) {\n    super({\n      pos: new Vector(x, y),\n      body: new Body({\n        collider: new Collider({\n          type: CollisionType.Active,\n          shape: Shape.Box(32, 50),\n          offset: new Vector(0, -1),\n          group: CollisionGroupManager.groupByName(\"enemy\")\n        })\n      })\n    });\n  }\n  \n  // OnInitialize is called before the 1st actor update\n  onInitialize(engine: Engine) {\n    // Initialize actor\n    \n    // Setup visuals\n    const left = baddieSpriteSheet.getAnimationByIndices(engine, [2, 3, 4, 5], 100);\n    left.scale = new Vector(2, 2);\n    const right = baddieSpriteSheet.getAnimationByIndices(engine, [2, 3, 4, 5], 100);\n    right.scale = new Vector(2, 2);\n    right.flipHorizontal = true;\n    \n    // Register animation\n    this.addDrawing(\"left\", left)\n    this.addDrawing(\"right\", right);\n    \n    \n    // Setup patroling behavior\n    this.actions.moveBy(400 * this.dir, 0, 100)\n    .moveBy(-400 * this.dir, 0, 100)\n    .repeatForever();\n    \n    // Handle being stomped by the player\n    this.on('postcollision', this.onPostCollision);\n  }\n  \n  onPostCollision(evt: PostCollisionEvent) {\n    if (evt.other instanceof Bot && evt.side === Side.Bottom) {\n      Resources.gotEm.play(.5);\n      // Clear patrolling\n      this.actions.clearActions();\n      // Remove ability to collide\n      this.body.collider.type = CollisionType.PreventCollision;\n      \n      // Launch into air with rotation\n      this.vel = new Vector(0, -300);\n      this.acc = Physics.acc;\n      this.rx = 2;\n    }\n  }\n  \n  // Change animation based on velocity \n  onPostUpdate() {\n    if (this.vel.x < 0) {\n      this.setDrawing(\"left\");\n    } else if (this.vel.x > 0) {\n      this.setDrawing(\"right\");\n    }\n  }  \n}","import {\n  Actor,\n  Vector,\n  Body,\n  Collider,\n  CollisionType,\n  Shape,\n  CollisionGroupManager,\n  Sprite,\n} from \"excalibur\";\nimport { getRandomIndex, getRandomSprite, indexByColRow } from \"../common/helpers\";\nimport { grassSpriteSheet } from \"../resources\";\n\nconst idx = indexByColRow(grassSpriteSheet.columns);\n\nexport class Brick extends Actor {\n  indicies:number[] = [];\n\n  constructor(x: number, y: number, public cols: number, public rows: number) {\n    super({\n      pos: new Vector(x, y),\n      scale: new Vector(2, 2),\n      anchor: Vector.Zero,\n      body: new Body({\n        collider: new Collider({\n          type: CollisionType.PreventCollision,\n          shape: Shape.Box(\n            grassSpriteSheet.spWidth * cols,\n            grassSpriteSheet.spHeight * rows,\n            Vector.Zero\n          ),\n          group: CollisionGroupManager.groupByName(\"floor\"),\n        }),\n      }),\n    });\n\n    for (let i = 0; i < this.cols; i++) {\n      for (let j = 0; j < this.rows; j++) {\n        const index = getRandomSprite(0, 7, 0, 7);\n        this.indicies.push(index);\n      }  \n    }\n  }\n  \n  // Custom draw in current actor transform\n  onPostDraw(ctx: CanvasRenderingContext2D) {\n    // for (let i = 0; i < grassSpriteSheet.columns; ++i) {\n    //   for (let j = 0; j < grassSpriteSheet.rows; ++j) {\n    //     const index = idx(i, j);\n    //     grassSpriteSheet.getSprite(index).draw(\n    //       ctx,\n    //       i * grassSpriteSheet.spWidth,\n    //       j * grassSpriteSheet.spHeight\n    //     );\n\n    //     ctx.save();\n        \n    //     ctx.font = '5px Arial';\n    //     ctx.fillStyle = 'rgba(255,255,0,0.9)';\n    //     ctx.strokeStyle = 'rgba(0,0,0,0.3)';\n\n    //     ctx.fillText(\n    //       `${i}, ${j}`,\n    //       (i+0.3) * grassSpriteSheet.spWidth,\n    //       (j+0.5) * grassSpriteSheet.spHeight,\n    //     );\n\n    //     ctx.strokeRect(\n    //       i * grassSpriteSheet.spWidth,\n    //       j * grassSpriteSheet.spHeight,\n    //       grassSpriteSheet.spWidth,\n    //       grassSpriteSheet.spHeight\n    //     );\n\n    //     ctx.restore();\n    //   }\n    // } \n\n    // return;\n\n    for (let i = 0; i < this.cols; i++) {\n      for (let j = 0; j < this.rows; j++) {\n        const index = this.indicies[idx(i, j)];\n        grassSpriteSheet.getSprite(index).draw(\n          ctx,\n          i * grassSpriteSheet.spWidth,\n          j * grassSpriteSheet.spHeight\n        );\n      }  \n    }\n  }\n}  ","import * as ex from 'excalibur';\nimport { blockSprite } from './resources';\n\nexport class Floor extends ex.Actor {\n    constructor(x: number, y: number, public cols: number, public rows: number) {\n        super({\n            pos: new ex.Vector(x, y),\n            scale: new ex.Vector(2, 2),\n            anchor: ex.Vector.Zero,\n            body: new ex.Body({\n                collider: new ex.Collider({\n                    type: ex.CollisionType.Fixed,\n                    shape: ex.Shape.Box(20 * cols, 15 * rows, ex.Vector.Zero),\n                    group: ex.CollisionGroupManager.groupByName(\"floor\")\n                })\n            })\n        });\n    }\n\n    // Custom draw in current actor transform\n    onPostDraw(ctx: CanvasRenderingContext2D) {\n        for (let i = 0; i < this.cols; i++) {\n            for (let j = 0; j < this.rows; j++) {\n                blockSprite.draw(ctx, i * blockSprite.drawWidth, j * blockSprite.drawHeight);\n            }\n        }\n    }\n}","import * as ex from 'excalibur';\nimport { botRedSpriteSheet, Resources, npcSprite } from './resources';\n\nexport class NPC extends ex.Actor {\n    public onGround = true;\n    public hurt = false;\n    public hurtTime: number = 0;\n    constructor(x: number, y: number) {\n        super({\n            pos: new ex.Vector(x, y),\n            body: new ex.Body({\n                collider: new ex.Collider({\n                    type: ex.CollisionType.Active,\n                    shape: ex.Shape.Box(32, 50),\n                    offset: new ex.Vector(0, 3),\n                    group: ex.CollisionGroupManager.groupByName(\"player\")\n                })\n            })\n        });\n    }\n\n    // OnInitialize is called before the 1st actor update\n    onInitialize(engine: ex.Engine) {\n        // Initialize actor\n\n        // Set the z-index to be behind everything\n        this.z = -1;\n\n        // Setup visuals\n        const hurtleft = botRedSpriteSheet.getAnimationByIndices(engine, [0, 1, 0, 1, 0, 1], 150);\n        hurtleft.scale = new ex.Vector(2, 2);\n\n        const hurtright = botRedSpriteSheet.getAnimationByIndices(engine, [0, 1, 0, 1, 0, 1], 150);\n        hurtright.scale = new ex.Vector(2, 2);\n        hurtright.flipHorizontal = true;\n\n        const idle = botRedSpriteSheet.getAnimationByIndices(engine, [2, 3], 800);\n        idle.scale = new ex.Vector(2, 2);\n\n        const left = botRedSpriteSheet.getAnimationByIndices(engine, [3, 4, 5, 6, 7], 100);\n        left.scale = new ex.Vector(2, 2);\n        \n        const right = botRedSpriteSheet.getAnimationByIndices(engine, [3, 4, 5, 6, 7], 100);\n        right.scale = new ex.Vector(2, 2);\n        right.flipHorizontal = true;\n\n        // Register drawings\n        this.addDrawing(\"hurtleft\", hurtleft);\n        this.addDrawing(\"hurtright\", hurtright);\n        this.addDrawing(\"idle\", idle);\n        this.addDrawing(\"left\", left);\n        this.addDrawing(\"right\", right);\n\n       // Setup patroling behavior\n       this.actions.moveBy(100, 0, 20)\n                   .moveBy(-100, 0, 20)\n                   .repeatForever();\n\n    }\n\n    onPostUpdate(engine: ex.Engine, delta: number) {\n        if (this.vel.x < 0) {\n            this.setDrawing(\"left\");\n        } \n        if (this.vel.x > 0) {\n            this.setDrawing(\"right\");\n        }\n        if (this.vel.x === 0){\n            this.setDrawing(\"idle\")\n        }\n    }\n\n    // Custom draw after local tranform, draws word bubble\n    onPostDraw(ctx: CanvasRenderingContext2D) {\n        npcSprite.draw(ctx, -10, -100);\n    }\n}","import { CollisionGroupManager, Color, Engine, Scene } from 'excalibur';\nimport { Baddie } from './baddie';\nimport { Bot } from './bot';\nimport { Brick } from './city/Brick';\nimport { Floor } from './floor';\nimport { NPC } from './npc';\n\nexport class Level extends Scene {\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  onInitialize(engine: Engine) {\n\n    engine.backgroundColor = Color.Gray;\n\n    // Create collision groups for the game\n    CollisionGroupManager.create(\"player\");\n    CollisionGroupManager.create(\"enemy\");\n    CollisionGroupManager.create(\"floor\");\n\n    // Compose actors in scene\n    const actor = new Bot( + 100, 120);\n\n    const baddie = new Baddie( + 200, 300 - 30, 1);\n    const baddie2 = new Baddie( + 100, 300 - 30, -1);\n\n    const npc = new NPC(400, 170);\n\n    for (let j = 0; j < 10; j++) {\n      for (let i = 0; i < 10; i++) {\n        const grass = new Brick((i - 4) * 320, (j - 4) * 320, 10, 10);\n        \n        engine.add(grass);\n      }\n    }\n    \n    const otherFloor = new Floor( + 50, 200, 1, 10);\n\n    engine.add(actor);\n    engine.add(npc);\n    engine.add(baddie);\n    engine.add(baddie2);\n    engine.add(otherFloor);\n\n    // Create camera strategy\n    this.camera.clearAllStrategies();\n    this.camera.strategy.elasticToActor(actor, 0.05, 0.05);\n    this.camera.zoom(1.5);\n  }\n}","import { loader } from './resources';\nimport { Level } from './level';\nimport { Color, DisplayMode, Engine, Physics, Vector } from 'excalibur';\n\nconst engine = new Engine({\n  backgroundColor: Color.fromHex('#000000'),\n  displayMode: DisplayMode.FullScreen,\n});\n\n// Turn off anti-aliasing for pixel art graphics\nengine.setAntialiasing(false);\n\n// Set global gravity, 800 pixels/sec^2\n// Physics.acc = new Vector(0, 981);\n\n// Setup first level as a custom scene\nengine.add('level', new Level(engine));\nengine.goToScene('level');\n\n// Game events to handle\n// engine.on('hidden', () => {\n//   console.log('pause');\n//   engine.stop();\n// });\nengine.on('visible', () => {\n  console.log('start');\n  engine.start();\n});\n\n// Start the engine\nengine.start(loader).then(() => {\n  console.log('game start');\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) var result = runtime(__webpack_require__);\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkexcalibur_webpack\"] = self[\"webpackChunkexcalibur_webpack\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [325], () => (__webpack_require__(6)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"sourceRoot":""}