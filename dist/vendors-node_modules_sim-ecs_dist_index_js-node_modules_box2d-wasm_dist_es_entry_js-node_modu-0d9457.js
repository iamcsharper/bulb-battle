"use strict";
(self["webpackChunkcitylights"] = self["webpackChunkcitylights"] || []).push([["vendors-node_modules_sim-ecs_dist_index_js-node_modules_box2d-wasm_dist_es_entry_js-node_modu-0d9457"],{

/***/ "./node_modules/sim-ecs/dist/commands/command-entity-builder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/sim-ecs/dist/commands/command-entity-builder.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandEntityBuilder = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
const entity_1 = __webpack_require__(/*! ../entity */ "./node_modules/sim-ecs/dist/entity.js");
tslib_1.__exportStar(__webpack_require__(/*! ./command-entity-builder.spec */ "./node_modules/sim-ecs/dist/commands/command-entity-builder.spec.js"), exports);
class CommandEntityBuilder {
    constructor(commands) {
        this.commands = commands;
        this.entity = new entity_1.Entity();
    }
    build() {
        this.commands.aggregator.addCommand(() => this.commands.world.addEntity(this.entity));
    }
    with(component, ...args) {
        this.entity.addComponent(this.asComponent(component));
        return this;
    }
    withAll(...components) {
        let component;
        for (component of components) {
            this.with(component);
        }
        return this;
    }
    asComponent(component, ...args) {
        return typeof component === 'object'
            ? component
            : new (component.prototype.constructor.bind(component, ...Array.from(arguments).slice(1)))();
    }
}
exports.CommandEntityBuilder = CommandEntityBuilder;
//# sourceMappingURL=command-entity-builder.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/commands/command-entity-builder.spec.js":
/*!***************************************************************************!*\
  !*** ./node_modules/sim-ecs/dist/commands/command-entity-builder.spec.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=command-entity-builder.spec.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/commands/commands-aggregator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sim-ecs/dist/commands/commands-aggregator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandsAggregator = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./commands-aggregator.spec */ "./node_modules/sim-ecs/dist/commands/commands-aggregator.spec.js"), exports);
class CommandsAggregator {
    constructor(world) {
        this.world = world;
        this.commands = [];
        this.doMaintain = false;
    }
    addCommand(command) {
        this.commands.push(command);
    }
    async executeAll() {
        for (let command = this.commands.shift(); !!command; command = this.commands.shift()) {
            await command();
        }
        if (this.doMaintain) {
            this.world.maintain();
        }
    }
    triggerMaintain() {
        this.doMaintain = true;
    }
}
exports.CommandsAggregator = CommandsAggregator;
//# sourceMappingURL=commands-aggregator.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/commands/commands-aggregator.spec.js":
/*!************************************************************************!*\
  !*** ./node_modules/sim-ecs/dist/commands/commands-aggregator.spec.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=commands-aggregator.spec.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/commands/commands.js":
/*!********************************************************!*\
  !*** ./node_modules/sim-ecs/dist/commands/commands.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Commands = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
const command_entity_builder_1 = __webpack_require__(/*! ./command-entity-builder */ "./node_modules/sim-ecs/dist/commands/command-entity-builder.js");
tslib_1.__exportStar(__webpack_require__(/*! ./commands.spec */ "./node_modules/sim-ecs/dist/commands/commands.spec.js"), exports);
class Commands {
    constructor(world, aggregator) {
        this.world = world;
        this.aggregator = aggregator;
    }
    addEntity(entity) {
        this.aggregator.addCommand(() => this.world.addEntity(entity));
    }
    addResource(obj, ...args) {
        let type;
        let instance;
        if (typeof obj === 'object') {
            type = obj.constructor;
            instance = obj;
        }
        else {
            type = obj;
            instance = new (obj.prototype.constructor.bind(obj, ...Array.from(arguments).slice(1)))();
        }
        if (this.world.resources.has(type)) {
            throw new Error(`Resource with name "${type.name}" already exists!`);
        }
        this.aggregator.addCommand(() => {
            if (this.world.resources.has(type)) {
                throw new Error(`Resource with name "${type.name}" already exists!`);
            }
            this.world.resources.set(type, instance);
        });
        return instance;
    }
    buildEntity() {
        return new command_entity_builder_1.CommandEntityBuilder(this);
    }
    clearEntities() {
        this.aggregator.addCommand(() => this.world.entities.clear());
    }
    load(prefab, options) {
        const handle = this.world.groups.nextHandle++;
        this.aggregator.addCommand(() => { this.world.load(prefab, options, handle); });
        return handle;
    }
    maintain() {
        this.aggregator.triggerMaintain();
    }
    merge(world) {
        const handle = this.world.groups.nextHandle++;
        this.aggregator.addCommand(() => { this.world.merge(world, handle); });
        return handle;
    }
    popState() {
        this.aggregator.addCommand(() => this.world.popState());
    }
    pushState(NewState) {
        this.aggregator.addCommand(() => this.world.pushState(NewState));
    }
    queueCommand(command) {
        this.aggregator.addCommand(command);
    }
    removeEntity(entity) {
        this.aggregator.addCommand(() => this.world.removeEntity(entity));
    }
    removeResource(type) {
        if (!this.world.resources.has(type)) {
            throw new Error(`Resource with name "${type.name}" does not exists!`);
        }
        this.aggregator.addCommand(() => {
            if (!this.world.resources.has(type)) {
                throw new Error(`Resource with name "${type.name}" does not exists!`);
            }
            this.world.resources.delete(type);
        });
    }
    replaceResource(obj, ...args) {
        let type;
        if (typeof obj === 'object') {
            type = obj.constructor;
        }
        else {
            type = obj;
        }
        if (!this.world.resources.has(type)) {
            throw new Error(`Resource with name "${type.name}" does not exists!`);
        }
        this.aggregator.addCommand(() => {
            if (!this.world.resources.has(type)) {
                throw new Error(`Resource with name "${type.name}" does not exists!`);
            }
            this.world.resources.delete(type);
            this.world.addResource(obj, ...args);
        });
    }
    stopRun() {
        this.aggregator.addCommand(() => this.world.stopRun());
    }
    unloadPrefab(handle) {
        this.aggregator.addCommand(() => this.world.unloadPrefab(handle));
    }
}
exports.Commands = Commands;
//# sourceMappingURL=commands.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/commands/commands.spec.js":
/*!*************************************************************!*\
  !*** ./node_modules/sim-ecs/dist/commands/commands.spec.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=commands.spec.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/ecs.js":
/*!******************************************!*\
  !*** ./node_modules/sim-ecs/dist/ecs.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ECS = void 0;
const world_builder_1 = __webpack_require__(/*! ./world-builder */ "./node_modules/sim-ecs/dist/world-builder.js");
class ECS {
    constructor() {
        this.worlds = new Map();
    }
    buildWorld(name) {
        return new world_builder_1.WorldBuilder(this).addCallback(world => this.worlds.set(world, { name, world }));
    }
    removeWorld(world) {
        this.worlds.delete(world);
    }
}
exports.ECS = ECS;
exports.default = ECS;
//# sourceMappingURL=ecs.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/entity-builder.js":
/*!*****************************************************!*\
  !*** ./node_modules/sim-ecs/dist/entity-builder.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EntityBuilder = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
const entity_1 = __webpack_require__(/*! ./entity */ "./node_modules/sim-ecs/dist/entity.js");
tslib_1.__exportStar(__webpack_require__(/*! ./entity-builder.spec */ "./node_modules/sim-ecs/dist/entity-builder.spec.js"), exports);
class EntityBuilder {
    constructor() {
        this.entity = new entity_1.Entity();
    }
    build() {
        return this.entity;
    }
    with(component, ...args) {
        this.entity.addComponent(this.asComponent(component));
        return this;
    }
    withAll(...components) {
        let component;
        for (component of components) {
            this.with(component);
        }
        return this;
    }
    asComponent(component, ...args) {
        return typeof component === 'object'
            ? component
            : new (component.prototype.constructor.bind(component, ...Array.from(arguments).slice(1)))();
    }
}
exports.EntityBuilder = EntityBuilder;
//# sourceMappingURL=entity-builder.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/entity-builder.spec.js":
/*!**********************************************************!*\
  !*** ./node_modules/sim-ecs/dist/entity-builder.spec.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=entity-builder.spec.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/entity.js":
/*!*********************************************!*\
  !*** ./node_modules/sim-ecs/dist/entity.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Entity = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./entity.spec */ "./node_modules/sim-ecs/dist/entity.spec.js"), exports);
class Entity {
    constructor() {
        this.components = new Map();
        this.tags = new Set();
    }
    addComponent(component) {
        if (this.hasComponent(component.constructor)) {
            throw new Error(`Component "${component.constructor.name}" already exists on entity!`);
        }
        this.components.set(component.constructor, component);
        return this;
    }
    addTag(tag) {
        this.tags.add(tag);
        return this;
    }
    getComponent(component) {
        return this.components.get(component);
    }
    getComponents() {
        return this.components.values();
    }
    getTags() {
        return this.tags.values();
    }
    hasComponent(component) {
        return this.components.has(component);
    }
    hasTag(tag) {
        return this.tags.has(tag);
    }
    removeComponent(component) {
        this.components.delete(component.constructor);
        return this;
    }
    removeTag(tag) {
        this.tags.delete(tag);
        return this;
    }
}
exports.Entity = Entity;
//# sourceMappingURL=entity.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/entity.spec.js":
/*!**************************************************!*\
  !*** ./node_modules/sim-ecs/dist/entity.spec.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=entity.spec.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/sim-ecs/dist/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./ecs */ "./node_modules/sim-ecs/dist/ecs.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./entity */ "./node_modules/sim-ecs/dist/entity.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./entity-builder */ "./node_modules/sim-ecs/dist/entity-builder.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./query */ "./node_modules/sim-ecs/dist/query.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./serde/serde */ "./node_modules/sim-ecs/dist/serde/serde.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./serde/serial-format */ "./node_modules/sim-ecs/dist/serde/serial-format.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./state */ "./node_modules/sim-ecs/dist/state.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./system */ "./node_modules/sim-ecs/dist/system.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./world */ "./node_modules/sim-ecs/dist/world.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/pda.js":
/*!******************************************!*\
  !*** ./node_modules/sim-ecs/dist/pda.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PushDownAutomaton = void 0;
class PushDownAutomaton {
    get state() {
        return this.currentState;
    }
    clear() {
        this.currentState = undefined;
        this.statesTail = undefined;
    }
    pop() {
        var _a;
        if (!this.statesTail)
            return;
        const oldTail = this.statesTail;
        this.statesTail = this.statesTail.prevNode;
        this.currentState = (_a = this.statesTail) === null || _a === void 0 ? void 0 : _a.state;
        return oldTail.state;
    }
    push(State) {
        this.currentState = new State();
        this.statesTail = {
            prevNode: this.statesTail,
            state: this.currentState,
        };
    }
}
exports.PushDownAutomaton = PushDownAutomaton;
//# sourceMappingURL=pda.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/query.js":
/*!********************************************!*\
  !*** ./node_modules/sim-ecs/dist/query.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WithoutTag = exports.Without = exports.WithTag = exports.With = exports.Write = exports.Read = exports.ReadEntity = exports.Query = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
const query_spec_1 = __webpack_require__(/*! ./query.spec */ "./node_modules/sim-ecs/dist/query.spec.js");
const entity_1 = __webpack_require__(/*! ./entity */ "./node_modules/sim-ecs/dist/entity.js");
tslib_1.__exportStar(__webpack_require__(/*! ./query.spec */ "./node_modules/sim-ecs/dist/query.spec.js"), exports);
// todo: ReadEntity() should also work
class Query {
    constructor(queryDescriptor) {
        this.queryDescriptor = queryDescriptor;
        this.queryResult = new Map();
    }
    get descriptor() {
        return this.queryDescriptor;
    }
    [query_spec_1.addEntitySym](entity) {
        if (this.matchesEntity(entity)) {
            if (Array.isArray(this.queryDescriptor)) {
                this.queryResult.set(entity, entity);
            }
            else {
                this.queryResult.set(entity, this.getDataFromEntity(entity, this.queryDescriptor));
            }
        }
    }
    [query_spec_1.clearEntitiesSym]() {
        this.queryResult.clear();
    }
    [query_spec_1.removeEntitySym](entity) {
        this.queryResult.delete(entity);
    }
    [query_spec_1.setEntitiesSym](entities) {
        let entity;
        this.queryResult.clear();
        for (entity of entities) {
            this[query_spec_1.addEntitySym](entity);
        }
    }
    execute(handler) {
        let data;
        for (data of this.queryResult.values()) {
            handler(data);
        }
    }
    getDataFromEntity(entity, descriptor) {
        const components = {};
        let componentDesc;
        for (componentDesc of Object.entries(descriptor)) {
            if (componentDesc[1][query_spec_1.accessDescSym].type == query_spec_1.EAccess.meta) {
                if (componentDesc[1][query_spec_1.accessDescSym].targetType == query_spec_1.ETargetType.entity) {
                    components[componentDesc[0]] = entity;
                }
            }
            else {
                components[componentDesc[0]] = entity.getComponent(componentDesc[1][query_spec_1.accessDescSym].target);
            }
        }
        return components;
    }
    iter(world) {
        if (world) {
            const data = [];
            // @ts-ignore todo: figure out why the type system errors `this`
            const entities = world.getEntities(this);
            let entity;
            for (entity of entities) {
                data.push(this.getDataFromEntity(entity, this.queryDescriptor));
            }
            return data.values();
        }
        else {
            return this.queryResult.values();
        }
    }
    matchesEntity(entity) {
        if (Array.isArray(this.queryDescriptor)) {
            let componentDesc;
            for (componentDesc of this.queryDescriptor) {
                if (componentDesc[query_spec_1.existenceDescSym].targetType == query_spec_1.ETargetType.tag
                    && entity.hasTag(componentDesc[query_spec_1.existenceDescSym].target) != (componentDesc[query_spec_1.existenceDescSym].type == query_spec_1.EExistence.set)) {
                    return false;
                }
                if (componentDesc[query_spec_1.existenceDescSym].targetType == query_spec_1.ETargetType.component
                    && entity.hasComponent(componentDesc[query_spec_1.existenceDescSym].target) != (componentDesc[query_spec_1.existenceDescSym].type == query_spec_1.EExistence.set)) {
                    return false;
                }
            }
        }
        else {
            let componentDesc;
            for (componentDesc of Object.values(this.queryDescriptor)) {
                if (componentDesc[query_spec_1.accessDescSym].targetType == query_spec_1.ETargetType.tag
                    && !entity.hasTag(componentDesc[query_spec_1.accessDescSym].target)) {
                    return false;
                }
                if (componentDesc[query_spec_1.accessDescSym].targetType == query_spec_1.ETargetType.component
                    && !entity.hasComponent(componentDesc[query_spec_1.accessDescSym].target)) {
                    return false;
                }
            }
        }
        return true;
    }
}
exports.Query = Query;
function ReadEntity() {
    return Object.assign({}, entity_1.Entity, {
        [query_spec_1.accessDescSym]: {
            target: entity_1.Entity,
            targetType: query_spec_1.ETargetType.entity,
            type: query_spec_1.EAccess.meta,
        },
    });
}
exports.ReadEntity = ReadEntity;
function Read(componentPrototype) {
    return Object.assign({}, componentPrototype.prototype, {
        [query_spec_1.accessDescSym]: {
            target: componentPrototype,
            targetType: query_spec_1.ETargetType.component,
            type: query_spec_1.EAccess.read,
        },
    });
}
exports.Read = Read;
function Write(componentPrototype) {
    return Object.assign({}, componentPrototype.prototype, {
        [query_spec_1.accessDescSym]: {
            target: componentPrototype,
            targetType: query_spec_1.ETargetType.component,
            type: query_spec_1.EAccess.write,
        },
    });
}
exports.Write = Write;
function With(componentPrototype) {
    return {
        [query_spec_1.existenceDescSym]: {
            target: componentPrototype,
            targetType: query_spec_1.ETargetType.component,
            type: query_spec_1.EExistence.set,
        }
    };
}
exports.With = With;
function WithTag(tag) {
    return {
        [query_spec_1.accessDescSym]: {
            target: tag,
            targetType: query_spec_1.ETargetType.tag,
            type: query_spec_1.EAccess.meta,
        },
        [query_spec_1.existenceDescSym]: {
            target: tag,
            targetType: query_spec_1.ETargetType.tag,
            type: query_spec_1.EExistence.set,
        }
    };
}
exports.WithTag = WithTag;
function Without(componentPrototype) {
    return {
        [query_spec_1.existenceDescSym]: {
            target: componentPrototype,
            targetType: query_spec_1.ETargetType.component,
            type: query_spec_1.EExistence.unset,
        }
    };
}
exports.Without = Without;
function WithoutTag(tag) {
    return {
        [query_spec_1.existenceDescSym]: {
            target: tag,
            targetType: query_spec_1.ETargetType.tag,
            type: query_spec_1.EExistence.unset,
        }
    };
}
exports.WithoutTag = WithoutTag;
//# sourceMappingURL=query.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/query.spec.js":
/*!*************************************************!*\
  !*** ./node_modules/sim-ecs/dist/query.spec.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ETargetType = exports.EExistence = exports.EAccess = exports.existenceDescSym = exports.accessDescSym = exports.setEntitiesSym = exports.removeEntitySym = exports.clearEntitiesSym = exports.addEntitySym = void 0;
exports.addEntitySym = Symbol();
exports.clearEntitiesSym = Symbol();
exports.removeEntitySym = Symbol();
exports.setEntitiesSym = Symbol();
exports.accessDescSym = Symbol();
exports.existenceDescSym = Symbol();
var EAccess;
(function (EAccess) {
    EAccess[EAccess["meta"] = 0] = "meta";
    EAccess[EAccess["read"] = 1] = "read";
    EAccess[EAccess["write"] = 2] = "write";
})(EAccess = exports.EAccess || (exports.EAccess = {}));
var EExistence;
(function (EExistence) {
    EExistence[EExistence["set"] = 0] = "set";
    EExistence[EExistence["unset"] = 1] = "unset";
})(EExistence = exports.EExistence || (exports.EExistence = {}));
var ETargetType;
(function (ETargetType) {
    ETargetType[ETargetType["component"] = 0] = "component";
    ETargetType[ETargetType["entity"] = 1] = "entity";
    ETargetType[ETargetType["tag"] = 2] = "tag";
})(ETargetType = exports.ETargetType || (exports.ETargetType = {}));
/*
export interface IQuery<D extends IAccessQueryResult<Object> | TExistenceQueryResult> {
    iter(): IterableIterator<D extends Array<infer T> ? IEntity : { [P in keyof D]: Required<Omit<InstanceType<D[P]>, keyof IAccessDescriptor<Object>>> }>
    matchesEntity(entity: IEntity): boolean
}

export type TQueryProto<D extends IAccessQueryResult<Object> | TExistenceQueryResult> = { new(): IQuery<D> };
*/ 
//# sourceMappingURL=query.spec.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/serde/default-handlers.js":
/*!*************************************************************!*\
  !*** ./node_modules/sim-ecs/dist/serde/default-handlers.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDefaultDeserializer = exports.getDefaultSerializer = void 0;
const getDefaultSerializer = function (customSerializer) {
    return (component) => {
        let componentName = typeof component;
        switch (typeof component) {
            case 'number': {
                return component;
            }
            case 'object': {
                if (component == null) {
                    return 'null';
                }
                componentName = component.constructor.name;
                switch (component.constructor.name) {
                    case 'Date':
                        return component.getTime();
                    case 'Array':
                    case 'Object':
                        return JSON.stringify(component.toString());
                    case 'Map':
                    case 'Set':
                        return JSON.stringify(Array.from(component));
                    case 'Number':
                        return component;
                }
                break;
            }
            case "string": {
                return JSON.stringify(component);
            }
        }
        if (!customSerializer) {
            throw new Error(`Missing serializer for "${componentName}"!`);
        }
        return customSerializer(component);
    };
};
exports.getDefaultSerializer = getDefaultSerializer;
const getDefaultDeserializer = function (customDeserializer) {
    return (constructorName, data) => {
        switch (constructorName.toLowerCase()) {
            case 'array': {
                if (!Array.isArray(data)) {
                    throw new Error(`Cannot deserialize Array with data of type ${typeof data}! Array expected!`);
                }
                return data;
            }
            case 'date': {
                if (typeof data != 'number') {
                    throw new Error(`Cannot deserialize Date with data of type ${typeof data}! Number expected!`);
                }
                return new Date(data);
            }
            case 'map': {
                if (!Array.isArray(data)) {
                    throw new Error(`Cannot deserialize Map with data of type ${typeof data}! Array of arrays expected!`);
                }
                return new Map(data);
            }
            case 'number': {
                if (typeof data != 'number') {
                    throw new Error(`Cannot deserialize Number with data of type ${typeof data}! Number expected!`);
                }
                return data;
            }
            case 'object': {
                if (typeof data != 'object') {
                    throw new Error(`Cannot deserialize Object with data of type ${typeof data}! Object expected!`);
                }
                return data;
            }
            case 'set': {
                if (!Array.isArray(data)) {
                    throw new Error(`Cannot deserialize Set with data of type ${typeof data}! Array expected!`);
                }
                return new Set(data);
            }
            case 'string': {
                if (typeof data != 'string') {
                    throw new Error(`Cannot deserialize String with data of type ${typeof data}! String expected!`);
                }
                return data;
            }
        }
        if (!customDeserializer) {
            throw new Error(`Missing deserializer for "${constructorName}"!`);
        }
        return customDeserializer(constructorName, data);
    };
};
exports.getDefaultDeserializer = getDefaultDeserializer;
//# sourceMappingURL=default-handlers.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/serde/serde.js":
/*!**************************************************!*\
  !*** ./node_modules/sim-ecs/dist/serde/serde.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SerDe = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
const serde_spec_1 = __webpack_require__(/*! ./serde.spec */ "./node_modules/sim-ecs/dist/serde/serde.spec.js");
const serial_format_1 = __webpack_require__(/*! ./serial-format */ "./node_modules/sim-ecs/dist/serde/serial-format.js");
const default_handlers_1 = __webpack_require__(/*! ./default-handlers */ "./node_modules/sim-ecs/dist/serde/default-handlers.js");
const entity_1 = __webpack_require__(/*! ../entity */ "./node_modules/sim-ecs/dist/entity.js");
tslib_1.__exportStar(__webpack_require__(/*! ./serde.spec */ "./node_modules/sim-ecs/dist/serde/serde.spec.js"), exports);
class SerDe {
    constructor() {
        this.typeHandlers = new Map();
    }
    deserialize(data, options) {
        var _a, _b;
        const finalOptions = {
            useDefaultHandler: (_a = options === null || options === void 0 ? void 0 : options.useDefaultHandler) !== null && _a !== void 0 ? _a : true,
            useRegisteredHandlers: (_b = options === null || options === void 0 ? void 0 : options.useRegisteredHandlers) !== null && _b !== void 0 ? _b : true,
            fallbackHandler: options === null || options === void 0 ? void 0 : options.fallbackHandler,
        };
        const entities = [];
        let entity;
        let serialComponentData;
        let serialComponentName;
        let serialEntity;
        let tag;
        for (serialEntity of data) {
            entity = new entity_1.Entity();
            for ([serialComponentName, serialComponentData] of Object.entries(serialEntity)) {
                if (finalOptions.useRegisteredHandlers && this.typeHandlers.has(serialComponentName)) {
                    entity.addComponent(this.typeHandlers.get(serialComponentName).deserializer(serialComponentData));
                }
                else if (serialComponentName == serde_spec_1.CTagMarker) {
                    if (!Array.isArray(serialComponentData)) {
                        throw new Error('Expected array of tags for the hash identifier!');
                    }
                    for (tag of serialComponentData) {
                        if (!['string', 'number'].includes(typeof tag)) {
                            throw new Error('Tags must be of type string or number!');
                        }
                        entity.addTag(tag);
                    }
                }
                else if (finalOptions.useDefaultHandler) {
                    entity.addComponent(default_handlers_1.getDefaultDeserializer(finalOptions.fallbackHandler)(serialComponentName, serialComponentData));
                }
            }
            entities.push(entity);
        }
        return {
            entities: entities.values(),
        };
    }
    getRegisteredTypeHandlers() {
        return this.typeHandlers.entries();
    }
    registerTypeHandler(Type, deserializer, serializer) {
        if (this.typeHandlers.has(Type.name)) {
            throw new Error(`The type "${Type.name}" was already registered!`);
        }
        this.typeHandlers.set(Type.name, {
            deserializer,
            serializer,
        });
    }
    serialize(data, options) {
        var _a, _b;
        const finalOptions = {
            useDefaultHandler: (_a = options === null || options === void 0 ? void 0 : options.useDefaultHandler) !== null && _a !== void 0 ? _a : true,
            useRegisteredHandlers: (_b = options === null || options === void 0 ? void 0 : options.useRegisteredHandlers) !== null && _b !== void 0 ? _b : true,
            fallbackHandler: options === null || options === void 0 ? void 0 : options.fallbackHandler,
        };
        const outData = new serial_format_1.SerialFormat();
        let component;
        let entity;
        let serialData;
        let serialEntity;
        let tags;
        for (entity of data.entities) {
            serialEntity = {};
            for (component of entity.getComponents()) {
                if (finalOptions.useRegisteredHandlers && this.typeHandlers.has(component.constructor.name)) {
                    serialData = this.typeHandlers.get(component.constructor.name).serializer(component);
                }
                else if (finalOptions.useDefaultHandler) {
                    serialData = default_handlers_1.getDefaultSerializer(finalOptions.fallbackHandler)(component);
                }
                serialEntity[component.constructor.name] = serialData;
                serialData = undefined;
            }
            {
                tags = Array.from(entity.getTags());
                if (tags.length > 0) {
                    serialEntity[serde_spec_1.CTagMarker] = tags;
                }
            }
            outData.push(serialEntity);
        }
        return outData;
    }
}
exports.SerDe = SerDe;
//# sourceMappingURL=serde.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/serde/serde.spec.js":
/*!*******************************************************!*\
  !*** ./node_modules/sim-ecs/dist/serde/serde.spec.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CTagMarker = void 0;
exports.CTagMarker = '#Tags';
//# sourceMappingURL=serde.spec.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/serde/serial-format.js":
/*!**********************************************************!*\
  !*** ./node_modules/sim-ecs/dist/serde/serial-format.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SerialFormat = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./serial-format.spec */ "./node_modules/sim-ecs/dist/serde/serial-format.spec.js"), exports);
class SerialFormat extends Array {
    static fromArray(arr) {
        return new SerialFormat().fromArray(arr);
    }
    static fromJSON(json) {
        return new SerialFormat().fromJSON(json);
    }
    fromArray(arr) {
        Object.assign(this, arr);
        return this;
    }
    fromJSON(json) {
        this.length = 0;
        const newVals = JSON.parse(json);
        if (!Array.isArray(newVals)) {
            throw new Error('Input JSON must be an array!');
        }
        for (const entity of newVals) {
            this.push(entity);
        }
        return this;
    }
    toJSON(indentation) {
        return JSON.stringify(Array.from(this), undefined, indentation);
    }
}
exports.SerialFormat = SerialFormat;
//# sourceMappingURL=serial-format.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/serde/serial-format.spec.js":
/*!***************************************************************!*\
  !*** ./node_modules/sim-ecs/dist/serde/serial-format.spec.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=serial-format.spec.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/state.js":
/*!********************************************!*\
  !*** ./node_modules/sim-ecs/dist/state.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.State = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./state.spec */ "./node_modules/sim-ecs/dist/state.spec.js"), exports);
class State {
    constructor(_systems = []) {
        this._systems = _systems;
    }
    get systems() {
        return this._systems;
    }
    activate(actions) { }
    create(actions) { }
    deactivate(actions) { }
    destroy(actions) { }
}
exports.State = State;
//# sourceMappingURL=state.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/state.spec.js":
/*!*************************************************!*\
  !*** ./node_modules/sim-ecs/dist/state.spec.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=state.spec.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/system.js":
/*!*********************************************!*\
  !*** ./node_modules/sim-ecs/dist/system.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.System = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./system.spec */ "./node_modules/sim-ecs/dist/system.spec.js"), exports);
class System {
    destroy(actions) { }
    setup(actions) { }
}
exports.System = System;
//# sourceMappingURL=system.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/system.spec.js":
/*!**************************************************!*\
  !*** ./node_modules/sim-ecs/dist/system.spec.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=system.spec.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/world-builder.js":
/*!****************************************************!*\
  !*** ./node_modules/sim-ecs/dist/world-builder.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._ = exports.WorldBuilder = void 0;
const world_1 = __webpack_require__(/*! ./world */ "./node_modules/sim-ecs/dist/world.js");
const serde_1 = __webpack_require__(/*! ./serde/serde */ "./node_modules/sim-ecs/dist/serde/serde.js");
class WorldBuilder {
    constructor(ecs) {
        this.ecs = ecs;
        this.callbacks = new Set();
        this.serde = new serde_1.SerDe();
        this.systemInfos = new Map();
    }
    addCallback(cb) {
        this.callbacks.add(cb);
        return this;
    }
    build() {
        const world = new world_1.World(this.ecs, new Set(this.systemInfos.values()), this.serde);
        for (const cb of this.callbacks) {
            cb(world);
        }
        return world;
    }
    withSystem(System, dependencies) {
        if (this.systemInfos.has(System)) {
            throw new Error(`The system ${System.constructor.name} is already registered!`);
        }
        this.systemInfos.set(System, {
            system: new System(),
            dependencies: new Set(dependencies),
        });
        return this;
    }
    withComponent(Component, options) {
        var _a, _b, _c, _d;
        this.serde.registerTypeHandler(Component, (_b = (_a = options === null || options === void 0 ? void 0 : options.serDe) === null || _a === void 0 ? void 0 : _a.deserializer) !== null && _b !== void 0 ? _b : dataStructDeserializer.bind(undefined, Component), (_d = (_c = options === null || options === void 0 ? void 0 : options.serDe) === null || _c === void 0 ? void 0 : _c.serializer) !== null && _d !== void 0 ? _d : dataStructSerializer);
        return this;
    }
    withComponents(...Components) {
        for (const Component of Components) {
            this.withComponent(Component);
        }
        return this;
    }
}
exports.WorldBuilder = WorldBuilder;
// todo: read the Constructor parameters in order to throw early if a field is missing
function dataStructDeserializer(Constructor, data) {
    if (typeof data != 'object') {
        throw new Error(`Cannot default-deserialize ${Constructor.name}, because the data is of type ${typeof data}!`);
    }
    const obj = new Constructor();
    for (const kv of Object.entries(data)) {
        obj[kv[0]] = kv[1];
    }
    return obj;
}
function dataStructSerializer(component) {
    return component;
}
exports._ = {
    dataStructDeserializer,
    dataStructSerializer,
};
//# sourceMappingURL=world-builder.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/world.js":
/*!********************************************!*\
  !*** ./node_modules/sim-ecs/dist/world.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.World = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js");
const entity_1 = __webpack_require__(/*! ./entity */ "./node_modules/sim-ecs/dist/entity.js");
const entity_builder_1 = __webpack_require__(/*! ./entity-builder */ "./node_modules/sim-ecs/dist/entity-builder.js");
const state_1 = __webpack_require__(/*! ./state */ "./node_modules/sim-ecs/dist/state.js");
const pda_1 = __webpack_require__(/*! ./pda */ "./node_modules/sim-ecs/dist/pda.js");
const serde_1 = __webpack_require__(/*! ./serde/serde */ "./node_modules/sim-ecs/dist/serde/serde.js");
const commands_1 = __webpack_require__(/*! ./commands/commands */ "./node_modules/sim-ecs/dist/commands/commands.js");
const commands_aggregator_1 = __webpack_require__(/*! ./commands/commands-aggregator */ "./node_modules/sim-ecs/dist/commands/commands-aggregator.js");
const query_1 = __webpack_require__(/*! ./query */ "./node_modules/sim-ecs/dist/query.js");
tslib_1.__exportStar(__webpack_require__(/*! ./world.spec */ "./node_modules/sim-ecs/dist/world.spec.js"), exports);
class World {
    constructor(ecs, systemInfos = new Set(), _serde = new serde_1.SerDe()) {
        this.ecs = ecs;
        this.systemInfos = systemInfos;
        this._serde = _serde;
        this._dirty = false;
        this.entities = new Set();
        this.pda = new pda_1.PushDownAutomaton();
        this.groups = {
            nextHandle: 0,
            entityLinks: new Map(),
        };
        this.queries = [];
        this.resources = new Map();
        this.runExecutionPipeline = [];
        this.runExecutionPipelineCache = new Map();
        this.runPromise = undefined;
        this.shouldRunSystems = false;
        const self = this;
        this._commandsAggregator = new commands_aggregator_1.CommandsAggregator(this);
        this._commands = new commands_1.Commands(this, this._commandsAggregator);
        this.systemWorld = Object.freeze({
            get commands() {
                return self._commands;
            },
            get currentState() {
                return self.pda.state;
            },
            getEntities: this.getEntities.bind(this),
            getResource: this.getResource.bind(this),
        });
        this.transitionWorld = Object.freeze({
            get commands() {
                return self._commands;
            },
            get currentState() {
                return self.pda.state;
            },
            get serde() {
                return self.serde;
            },
            buildEntity: this.buildEntity.bind(this),
            flushCommands: this.flushCommands.bind(this),
            getEntities: this.getEntities.bind(this),
            getResource: this.getResource.bind(this),
            getResources: this.getResources.bind(this),
            maintain: this.maintain.bind(this),
            save: this.save.bind(this),
        });
        this.sortedSystems = this.sortSystems(this.systemInfos);
        for (const systemInfo of this.systemInfos) {
            if (systemInfo.system.query) {
                this.queries.push(systemInfo.system.query);
            }
        }
    }
    get commands() {
        return this._commands;
    }
    get dirty() {
        return this._dirty;
    }
    get running() {
        return this.shouldRunSystems;
    }
    get serde() {
        return this._serde;
    }
    addEntity(entity) {
        if (!this.entities.has(entity)) {
            this.entities.add(entity);
            this._dirty = true;
        }
    }
    addResource(obj, ...args) {
        let type;
        let instance;
        if (typeof obj === 'object') {
            type = obj.constructor;
            instance = obj;
        }
        else {
            type = obj;
            instance = new (obj.prototype.constructor.bind(obj, ...Array.from(arguments).slice(1)))();
        }
        if (this.resources.has(type)) {
            throw new Error(`Resource with name "${type.name}" already exists!`);
        }
        this.resources.set(type, instance);
        return instance;
    }
    buildEntity() {
        return new entity_builder_1.EntityBuilder();
    }
    clearEntities() {
        this.entities.clear();
    }
    createEntity() {
        const entity = new entity_1.Entity();
        this.entities.add(entity);
        this._dirty = true;
        return entity;
    }
    async dispatch(state) {
        await this.run({
            initialState: state,
            afterStepHandler: actions => actions.commands.stopRun(),
        });
    }
    flushCommands() {
        return this._commandsAggregator.executeAll();
    }
    getEntities(query) {
        if (!query) {
            return this.entities.keys();
        }
        const resultEntities = new Set();
        let entity;
        for (entity of this.entities.keys()) {
            if (query.matchesEntity(entity)) {
                resultEntities.add(entity);
            }
        }
        return resultEntities.values();
    }
    getResource(type) {
        if (!this.resources.has(type)) {
            throw new Error(`Resource of type "${type.name}" does not exist!`);
        }
        return this.resources.get(type);
    }
    getResources() {
        return this.resources.values();
    }
    load(prefab, options, intoGroup) {
        const entities = [];
        const groupHandle = intoGroup !== null && intoGroup !== void 0 ? intoGroup : this.groups.nextHandle++;
        let entity;
        for (entity of this._serde.deserialize(prefab, options).entities) {
            this.addEntity(entity);
            entities.push(entity);
        }
        this.groups.entityLinks.set(groupHandle, entities);
        return groupHandle;
    }
    // todo: add parameter which only maintains for a specific state
    // todo: maybe use a change-log to only maintain real changes instead of everything
    maintain() {
        let query;
        for (query of this.queries) {
            query[query_1.setEntitiesSym](this.entities.values());
        }
        this._dirty = false;
    }
    merge(elsewhere, intoGroup) {
        const groupHandle = intoGroup !== null && intoGroup !== void 0 ? intoGroup : this.groups.nextHandle++;
        const entities = [];
        let entity;
        for (entity of elsewhere.getEntities()) {
            this.addEntity(entity);
            entities.push(entity);
        }
        return [groupHandle, entities];
    }
    async popState() {
        var _a, _b;
        await ((_a = this.pda.pop()) === null || _a === void 0 ? void 0 : _a.deactivate(this.transitionWorld));
        const newState = this.pda.state;
        if (!newState) {
            this.runExecutionPipeline = [];
            return;
        }
        await newState.activate(this.transitionWorld);
        this.runExecutionPipeline = (_b = this.runExecutionPipelineCache.get(newState.constructor)) !== null && _b !== void 0 ? _b : [];
    }
    // todo: improve logic which sets up the groups (tracked by #13)
    prepareExecutionPipeline(state) {
        // todo: this could be further optimized by allowing systems with dependencies to run in parallel
        //    if all of their dependencies already ran
        // todo: also, if two systems depend on the same components, they may run in parallel
        //    if they only require READ access
        const result = [];
        const stateSystems = state.systems;
        let executionGroup = new Set();
        let shouldRunSystem;
        let systemInfo;
        if (this.sortedSystems.size == 0) {
            this.sortSystems(this.systemInfos);
        }
        for (systemInfo of this.sortedSystems) {
            shouldRunSystem = !!stateSystems.find(stateSys => stateSys.prototype.constructor.name === systemInfo.system.constructor.name);
            if (shouldRunSystem) {
                if (systemInfo.dependencies.size > 0) {
                    result.push(executionGroup);
                    executionGroup = new Set();
                }
                executionGroup.add(systemInfo.system);
            }
        }
        result.push(executionGroup);
        return result;
    }
    async pushState(NewState) {
        var _a, _b;
        await ((_a = this.pda.state) === null || _a === void 0 ? void 0 : _a.deactivate(this.transitionWorld));
        this.pda.push(NewState);
        const newState = this.pda.state;
        const registeredSystemNames = Array.from(this.systemInfos).map(nfo => nfo.system.constructor.name);
        for (const system of newState.systems) {
            if (!registeredSystemNames.includes(system.name)) {
                // cannot infer dependencies, so we have to throw :/
                throw new Error(`Did you forget to register System ${system.name}?`);
            }
        }
        if (this.runExecutionPipelineCache.has(NewState)) {
            this.runExecutionPipeline = (_b = this.runExecutionPipelineCache.get(NewState)) !== null && _b !== void 0 ? _b : [];
        }
        else {
            newState.create(this.transitionWorld);
            this.runExecutionPipeline = this.prepareExecutionPipeline(newState);
            this.runExecutionPipelineCache.set(NewState, this.runExecutionPipeline);
        }
        await newState.activate(this.transitionWorld);
    }
    async prepareRun(configuration) {
        var _a, _b, _c;
        if (this.runPromise) {
            throw new Error('The dispatch loop is already running!');
        }
        if (this._dirty) {
            this.maintain();
        }
        configuration || (configuration = {});
        const initialState = configuration.initialState
            ? configuration.initialState
            : state_1.State.bind(undefined, Array.from(this.systemInfos.values()).map(systemInfo => systemInfo.system.constructor));
        const runConfig = {
            afterStepHandler: (_a = configuration.afterStepHandler) !== null && _a !== void 0 ? _a : (_action => { }),
            beforeStepHandler: (_b = configuration.beforeStepHandler) !== null && _b !== void 0 ? _b : (_action => { }),
            executionFunction: (_c = configuration.executionFunction) !== null && _c !== void 0 ? _c : (typeof requestAnimationFrame == 'function'
                ? requestAnimationFrame
                : setTimeout),
            initialState,
        };
        this.pda.clear();
        this.shouldRunSystems = true;
        for (const systemInfo of this.systemInfos) {
            await systemInfo.system.setup(this.systemWorld);
        }
        await this.pushState(initialState);
        this.runExecutionPipeline = this.prepareExecutionPipeline(this.pda.state);
        this.lastRunPreparation = runConfig;
        return runConfig;
    }
    removeEntity(entity) {
        this.entities.delete(entity);
        this._dirty = true;
    }
    removeEntityFromSystems(entity) {
        this.removeEntity(entity);
        this.maintain();
    }
    replaceEntitiesWith(world) {
        this.clearEntities();
        this.merge(world);
    }
    replaceResource(obj, ...args) {
        let type;
        if (typeof obj === 'object') {
            type = obj.constructor;
        }
        else {
            type = obj;
        }
        if (!this.resources.has(type)) {
            throw new Error(`Resource with name "${type.name}" does not exists!`);
        }
        this.resources.delete(type);
        this.addResource(obj, ...args);
    }
    removeResource(type) {
        if (!this.resources.has(type)) {
            throw new Error(`Resource with name "${type.name}" does not exists!`);
        }
        this.resources.delete(type);
    }
    run(configuration, skipPreparation = false) {
        const runPromise = new Promise(async (resolver) => {
            let preparedConfig;
            await this._commandsAggregator.executeAll();
            if (!skipPreparation) {
                preparedConfig = await this.prepareRun(configuration);
            }
            else {
                preparedConfig = this.lastRunPreparation;
            }
            if (!preparedConfig) {
                throw new Error('Cannot run without preparing the run!');
            }
            this.runPromise = runPromise;
            const afterStepHandler = preparedConfig.afterStepHandler;
            const beforeStepHandler = preparedConfig.beforeStepHandler;
            const execFn = preparedConfig.executionFunction;
            let systemPromises;
            const cleanUp = async () => {
                var _a;
                await ((_a = this.pda.state) === null || _a === void 0 ? void 0 : _a.deactivate(this.transitionWorld));
                for (let state = this.pda.pop(); !!state; state = this.pda.pop()) {
                    await state.destroy(this.transitionWorld);
                }
                for (const systemInfo of this.systemInfos) {
                    await systemInfo.system.destroy(this.systemWorld);
                }
                this.runExecutionPipelineCache.clear();
                this.runPromise = undefined;
                resolver();
            };
            const mainLoop = async () => {
                if (!this.shouldRunSystems) {
                    await cleanUp();
                    return;
                }
                await beforeStepHandler(this.transitionWorld);
                {
                    let executionGroup;
                    let system;
                    for (executionGroup of this.runExecutionPipeline) {
                        systemPromises = [];
                        for (system of executionGroup) {
                            systemPromises.push(system.run(this.systemWorld));
                        }
                        await Promise.all(systemPromises);
                    }
                }
                await afterStepHandler(this.transitionWorld);
                await this._commandsAggregator.executeAll();
                execFn(mainLoop);
            };
            execFn(mainLoop);
        });
        return runPromise;
    }
    sortSystems(unsorted) {
        const unsortedArr = Array.from(unsorted);
        const graph = new Map(unsortedArr.map(node => [node.system.constructor, Array.from(node.dependencies)]));
        let edges;
        /// toposort with Kahn
        /// https://en.wikipedia.org/wiki/Topological_sorting#Kahn's_algorithm
        const L = []; // Empty list that will contain the sorted elements
        const S = Array.from(graph.entries()).filter(pair => pair[1].length === 0).map(pair => pair[0]); // Set of all nodes with no incoming edge
        let n;
        // while S is non-empty do
        while (S.length > 0) {
            // remove a node n from S
            n = S.shift();
            // add n to tail of L
            L.push(n);
            // for each node m with an edge e from n to m do
            for (let m of Array.from(graph.entries()).filter(pair => pair[1].includes(n)).map(pair => pair[0])) {
                // remove edge e from the graph
                edges = graph.get(m);
                edges.splice(edges.indexOf(n), 1);
                // if m has no other incoming edges then
                if (edges.length <= 0) {
                    // insert m into S
                    S.push(m);
                }
            }
        }
        if (Array.from(graph.values()).find(n => n.length > 0)) {
            throw new Error('The system dependency graph is cyclic!');
        }
        let obj;
        return new Set(L.map(t => {
            obj = unsortedArr.find(n => n.system.constructor == t);
            if (!obj) {
                throw new Error(`The system ${t.name} was not registered!`);
            }
            return obj;
        }));
    }
    stopRun() {
        this.shouldRunSystems = false;
    }
    save(query, options) {
        return this.serde.serialize({ entities: this.getEntities(query) }, options);
    }
    unloadPrefab(handle) {
        if (!this.groups.entityLinks.has(handle)) {
            throw new Error(`Could not find any loaded prefab under handle "${handle}"!`);
        }
        let entity;
        for (entity of this.groups.entityLinks.get(handle)) {
            this.removeEntity(entity);
        }
        this.groups.entityLinks.delete(handle);
    }
}
exports.World = World;
//# sourceMappingURL=world.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/dist/world.spec.js":
/*!*************************************************!*\
  !*** ./node_modules/sim-ecs/dist/world.spec.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=world.spec.js.map

/***/ }),

/***/ "./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js":
/*!**************************************************************!*\
  !*** ./node_modules/sim-ecs/node_modules/tslib/tslib.es6.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__values": () => (/* binding */ __values),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || from);
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}


/***/ }),

/***/ "./node_modules/box2d-wasm/dist/es/entry.js":
/*!**************************************************!*\
  !*** ./node_modules/box2d-wasm/dist/es/entry.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @param {Parameters<import('box2d-wasm')>} args
 * @return {ReturnType<import('box2d-wasm')>}
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (async (...args) => {
  /**
   * This validation expression comes from wasm-feature-detect:
   * https://github.com/GoogleChromeLabs/wasm-feature-detect
   * 
   * Copyright 2019 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *     http://www.apache.org/licenses/LICENSE-2.0
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const hasSIMD = WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]));
  /** @type {{ 'default': import('box2d-wasm') }} */
  const Box2DModule = await (
    hasSIMD
      ? Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_path-browserify_index_js"), __webpack_require__.e("vendors-node_modules_box2d-wasm_dist_es_Box2D_simd_js"), __webpack_require__.e("_41210")]).then(__webpack_require__.bind(__webpack_require__, /*! ./Box2D.simd.js */ "./node_modules/box2d-wasm/dist/es/Box2D.simd.js"))
      : Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_path-browserify_index_js"), __webpack_require__.e("vendors-node_modules_box2d-wasm_dist_es_Box2D_js"), __webpack_require__.e("_41211")]).then(__webpack_require__.bind(__webpack_require__, /*! ./Box2D.js */ "./node_modules/box2d-wasm/dist/es/Box2D.js"))
  );
  const { 'default': Box2DFactory } = Box2DModule;
  // awaiting gives us a better stack trace (at the cost of an extra microtask)
  return await Box2DFactory(...args);
});

/***/ }),

/***/ "./node_modules/keycode-js/dist/keycode.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/keycode-js/dist/keycode.esm.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CODE_0": () => (/* binding */ CODE_0),
/* harmony export */   "CODE_1": () => (/* binding */ CODE_1),
/* harmony export */   "CODE_2": () => (/* binding */ CODE_2),
/* harmony export */   "CODE_3": () => (/* binding */ CODE_3),
/* harmony export */   "CODE_4": () => (/* binding */ CODE_4),
/* harmony export */   "CODE_5": () => (/* binding */ CODE_5),
/* harmony export */   "CODE_6": () => (/* binding */ CODE_6),
/* harmony export */   "CODE_7": () => (/* binding */ CODE_7),
/* harmony export */   "CODE_8": () => (/* binding */ CODE_8),
/* harmony export */   "CODE_9": () => (/* binding */ CODE_9),
/* harmony export */   "CODE_A": () => (/* binding */ CODE_A),
/* harmony export */   "CODE_ALT_LEFT": () => (/* binding */ CODE_ALT_LEFT),
/* harmony export */   "CODE_ALT_RIGHT": () => (/* binding */ CODE_ALT_RIGHT),
/* harmony export */   "CODE_B": () => (/* binding */ CODE_B),
/* harmony export */   "CODE_BACK_QUOTE": () => (/* binding */ CODE_BACK_QUOTE),
/* harmony export */   "CODE_BACK_SLASH": () => (/* binding */ CODE_BACK_SLASH),
/* harmony export */   "CODE_BACK_SPACE": () => (/* binding */ CODE_BACK_SPACE),
/* harmony export */   "CODE_C": () => (/* binding */ CODE_C),
/* harmony export */   "CODE_CAPS_LOCK": () => (/* binding */ CODE_CAPS_LOCK),
/* harmony export */   "CODE_CLOSE_BRACKET": () => (/* binding */ CODE_CLOSE_BRACKET),
/* harmony export */   "CODE_COMMA": () => (/* binding */ CODE_COMMA),
/* harmony export */   "CODE_CONTEXT_MENU": () => (/* binding */ CODE_CONTEXT_MENU),
/* harmony export */   "CODE_CONTROL_LEFT": () => (/* binding */ CODE_CONTROL_LEFT),
/* harmony export */   "CODE_CONTROL_RIGHT": () => (/* binding */ CODE_CONTROL_RIGHT),
/* harmony export */   "CODE_D": () => (/* binding */ CODE_D),
/* harmony export */   "CODE_DASH": () => (/* binding */ CODE_DASH),
/* harmony export */   "CODE_DELETE": () => (/* binding */ CODE_DELETE),
/* harmony export */   "CODE_DOWN": () => (/* binding */ CODE_DOWN),
/* harmony export */   "CODE_E": () => (/* binding */ CODE_E),
/* harmony export */   "CODE_END": () => (/* binding */ CODE_END),
/* harmony export */   "CODE_ENTER": () => (/* binding */ CODE_ENTER),
/* harmony export */   "CODE_EQUALS": () => (/* binding */ CODE_EQUALS),
/* harmony export */   "CODE_ESCAPE": () => (/* binding */ CODE_ESCAPE),
/* harmony export */   "CODE_F": () => (/* binding */ CODE_F),
/* harmony export */   "CODE_F1": () => (/* binding */ CODE_F1),
/* harmony export */   "CODE_F10": () => (/* binding */ CODE_F10),
/* harmony export */   "CODE_F11": () => (/* binding */ CODE_F11),
/* harmony export */   "CODE_F12": () => (/* binding */ CODE_F12),
/* harmony export */   "CODE_F13": () => (/* binding */ CODE_F13),
/* harmony export */   "CODE_F14": () => (/* binding */ CODE_F14),
/* harmony export */   "CODE_F15": () => (/* binding */ CODE_F15),
/* harmony export */   "CODE_F16": () => (/* binding */ CODE_F16),
/* harmony export */   "CODE_F17": () => (/* binding */ CODE_F17),
/* harmony export */   "CODE_F18": () => (/* binding */ CODE_F18),
/* harmony export */   "CODE_F19": () => (/* binding */ CODE_F19),
/* harmony export */   "CODE_F2": () => (/* binding */ CODE_F2),
/* harmony export */   "CODE_F20": () => (/* binding */ CODE_F20),
/* harmony export */   "CODE_F21": () => (/* binding */ CODE_F21),
/* harmony export */   "CODE_F22": () => (/* binding */ CODE_F22),
/* harmony export */   "CODE_F23": () => (/* binding */ CODE_F23),
/* harmony export */   "CODE_F24": () => (/* binding */ CODE_F24),
/* harmony export */   "CODE_F3": () => (/* binding */ CODE_F3),
/* harmony export */   "CODE_F4": () => (/* binding */ CODE_F4),
/* harmony export */   "CODE_F5": () => (/* binding */ CODE_F5),
/* harmony export */   "CODE_F6": () => (/* binding */ CODE_F6),
/* harmony export */   "CODE_F7": () => (/* binding */ CODE_F7),
/* harmony export */   "CODE_F8": () => (/* binding */ CODE_F8),
/* harmony export */   "CODE_F9": () => (/* binding */ CODE_F9),
/* harmony export */   "CODE_G": () => (/* binding */ CODE_G),
/* harmony export */   "CODE_H": () => (/* binding */ CODE_H),
/* harmony export */   "CODE_HOME": () => (/* binding */ CODE_HOME),
/* harmony export */   "CODE_I": () => (/* binding */ CODE_I),
/* harmony export */   "CODE_INSERT": () => (/* binding */ CODE_INSERT),
/* harmony export */   "CODE_J": () => (/* binding */ CODE_J),
/* harmony export */   "CODE_K": () => (/* binding */ CODE_K),
/* harmony export */   "CODE_L": () => (/* binding */ CODE_L),
/* harmony export */   "CODE_LEFT": () => (/* binding */ CODE_LEFT),
/* harmony export */   "CODE_M": () => (/* binding */ CODE_M),
/* harmony export */   "CODE_META_LEFT": () => (/* binding */ CODE_META_LEFT),
/* harmony export */   "CODE_META_RIGHT": () => (/* binding */ CODE_META_RIGHT),
/* harmony export */   "CODE_MINUS": () => (/* binding */ CODE_MINUS),
/* harmony export */   "CODE_N": () => (/* binding */ CODE_N),
/* harmony export */   "CODE_NUMPAD0": () => (/* binding */ CODE_NUMPAD0),
/* harmony export */   "CODE_NUMPAD1": () => (/* binding */ CODE_NUMPAD1),
/* harmony export */   "CODE_NUMPAD2": () => (/* binding */ CODE_NUMPAD2),
/* harmony export */   "CODE_NUMPAD3": () => (/* binding */ CODE_NUMPAD3),
/* harmony export */   "CODE_NUMPAD4": () => (/* binding */ CODE_NUMPAD4),
/* harmony export */   "CODE_NUMPAD5": () => (/* binding */ CODE_NUMPAD5),
/* harmony export */   "CODE_NUMPAD6": () => (/* binding */ CODE_NUMPAD6),
/* harmony export */   "CODE_NUMPAD7": () => (/* binding */ CODE_NUMPAD7),
/* harmony export */   "CODE_NUMPAD8": () => (/* binding */ CODE_NUMPAD8),
/* harmony export */   "CODE_NUMPAD9": () => (/* binding */ CODE_NUMPAD9),
/* harmony export */   "CODE_NUMPAD_ADD": () => (/* binding */ CODE_NUMPAD_ADD),
/* harmony export */   "CODE_NUMPAD_DECIMAL": () => (/* binding */ CODE_NUMPAD_DECIMAL),
/* harmony export */   "CODE_NUMPAD_DIVIDE": () => (/* binding */ CODE_NUMPAD_DIVIDE),
/* harmony export */   "CODE_NUMPAD_ENTER": () => (/* binding */ CODE_NUMPAD_ENTER),
/* harmony export */   "CODE_NUMPAD_MULTIPLY": () => (/* binding */ CODE_NUMPAD_MULTIPLY),
/* harmony export */   "CODE_NUMPAD_SUBTRACT": () => (/* binding */ CODE_NUMPAD_SUBTRACT),
/* harmony export */   "CODE_NUM_LOCK": () => (/* binding */ CODE_NUM_LOCK),
/* harmony export */   "CODE_O": () => (/* binding */ CODE_O),
/* harmony export */   "CODE_OPEN_BRACKET": () => (/* binding */ CODE_OPEN_BRACKET),
/* harmony export */   "CODE_OS_LEFT": () => (/* binding */ CODE_OS_LEFT),
/* harmony export */   "CODE_OS_RIGHT": () => (/* binding */ CODE_OS_RIGHT),
/* harmony export */   "CODE_P": () => (/* binding */ CODE_P),
/* harmony export */   "CODE_PAGE_DOWN": () => (/* binding */ CODE_PAGE_DOWN),
/* harmony export */   "CODE_PAGE_UP": () => (/* binding */ CODE_PAGE_UP),
/* harmony export */   "CODE_PAUSE": () => (/* binding */ CODE_PAUSE),
/* harmony export */   "CODE_PERIOD": () => (/* binding */ CODE_PERIOD),
/* harmony export */   "CODE_PRINTSCREEN": () => (/* binding */ CODE_PRINTSCREEN),
/* harmony export */   "CODE_Q": () => (/* binding */ CODE_Q),
/* harmony export */   "CODE_QUOTE": () => (/* binding */ CODE_QUOTE),
/* harmony export */   "CODE_R": () => (/* binding */ CODE_R),
/* harmony export */   "CODE_RETURN": () => (/* binding */ CODE_RETURN),
/* harmony export */   "CODE_RIGHT": () => (/* binding */ CODE_RIGHT),
/* harmony export */   "CODE_S": () => (/* binding */ CODE_S),
/* harmony export */   "CODE_SCROLL_LOCK": () => (/* binding */ CODE_SCROLL_LOCK),
/* harmony export */   "CODE_SEMICOLON": () => (/* binding */ CODE_SEMICOLON),
/* harmony export */   "CODE_SHIFT_LEFT": () => (/* binding */ CODE_SHIFT_LEFT),
/* harmony export */   "CODE_SHIFT_RIGHT": () => (/* binding */ CODE_SHIFT_RIGHT),
/* harmony export */   "CODE_SLASH": () => (/* binding */ CODE_SLASH),
/* harmony export */   "CODE_SPACE": () => (/* binding */ CODE_SPACE),
/* harmony export */   "CODE_T": () => (/* binding */ CODE_T),
/* harmony export */   "CODE_TAB": () => (/* binding */ CODE_TAB),
/* harmony export */   "CODE_U": () => (/* binding */ CODE_U),
/* harmony export */   "CODE_UNIDENTIFIED": () => (/* binding */ CODE_UNIDENTIFIED),
/* harmony export */   "CODE_UP": () => (/* binding */ CODE_UP),
/* harmony export */   "CODE_V": () => (/* binding */ CODE_V),
/* harmony export */   "CODE_W": () => (/* binding */ CODE_W),
/* harmony export */   "CODE_X": () => (/* binding */ CODE_X),
/* harmony export */   "CODE_Y": () => (/* binding */ CODE_Y),
/* harmony export */   "CODE_Z": () => (/* binding */ CODE_Z),
/* harmony export */   "KEY_0": () => (/* binding */ KEY_0),
/* harmony export */   "KEY_1": () => (/* binding */ KEY_1),
/* harmony export */   "KEY_2": () => (/* binding */ KEY_2),
/* harmony export */   "KEY_3": () => (/* binding */ KEY_3),
/* harmony export */   "KEY_4": () => (/* binding */ KEY_4),
/* harmony export */   "KEY_5": () => (/* binding */ KEY_5),
/* harmony export */   "KEY_6": () => (/* binding */ KEY_6),
/* harmony export */   "KEY_7": () => (/* binding */ KEY_7),
/* harmony export */   "KEY_8": () => (/* binding */ KEY_8),
/* harmony export */   "KEY_9": () => (/* binding */ KEY_9),
/* harmony export */   "KEY_A": () => (/* binding */ KEY_A),
/* harmony export */   "KEY_ADD": () => (/* binding */ KEY_ADD),
/* harmony export */   "KEY_ALT": () => (/* binding */ KEY_ALT),
/* harmony export */   "KEY_B": () => (/* binding */ KEY_B),
/* harmony export */   "KEY_BACK_QUOTE": () => (/* binding */ KEY_BACK_QUOTE),
/* harmony export */   "KEY_BACK_SLASH": () => (/* binding */ KEY_BACK_SLASH),
/* harmony export */   "KEY_BACK_SPACE": () => (/* binding */ KEY_BACK_SPACE),
/* harmony export */   "KEY_C": () => (/* binding */ KEY_C),
/* harmony export */   "KEY_CANCEL": () => (/* binding */ KEY_CANCEL),
/* harmony export */   "KEY_CAPS_LOCK": () => (/* binding */ KEY_CAPS_LOCK),
/* harmony export */   "KEY_CLEAR": () => (/* binding */ KEY_CLEAR),
/* harmony export */   "KEY_CLOSE_BRACKET": () => (/* binding */ KEY_CLOSE_BRACKET),
/* harmony export */   "KEY_COMMA": () => (/* binding */ KEY_COMMA),
/* harmony export */   "KEY_CONTEXT_MENU": () => (/* binding */ KEY_CONTEXT_MENU),
/* harmony export */   "KEY_CONTROL": () => (/* binding */ KEY_CONTROL),
/* harmony export */   "KEY_D": () => (/* binding */ KEY_D),
/* harmony export */   "KEY_DASH": () => (/* binding */ KEY_DASH),
/* harmony export */   "KEY_DECIMAL": () => (/* binding */ KEY_DECIMAL),
/* harmony export */   "KEY_DELETE": () => (/* binding */ KEY_DELETE),
/* harmony export */   "KEY_DIVIDE": () => (/* binding */ KEY_DIVIDE),
/* harmony export */   "KEY_DOWN": () => (/* binding */ KEY_DOWN),
/* harmony export */   "KEY_E": () => (/* binding */ KEY_E),
/* harmony export */   "KEY_END": () => (/* binding */ KEY_END),
/* harmony export */   "KEY_EQUALS": () => (/* binding */ KEY_EQUALS),
/* harmony export */   "KEY_ESCAPE": () => (/* binding */ KEY_ESCAPE),
/* harmony export */   "KEY_F": () => (/* binding */ KEY_F),
/* harmony export */   "KEY_F1": () => (/* binding */ KEY_F1),
/* harmony export */   "KEY_F10": () => (/* binding */ KEY_F10),
/* harmony export */   "KEY_F11": () => (/* binding */ KEY_F11),
/* harmony export */   "KEY_F12": () => (/* binding */ KEY_F12),
/* harmony export */   "KEY_F13": () => (/* binding */ KEY_F13),
/* harmony export */   "KEY_F14": () => (/* binding */ KEY_F14),
/* harmony export */   "KEY_F15": () => (/* binding */ KEY_F15),
/* harmony export */   "KEY_F16": () => (/* binding */ KEY_F16),
/* harmony export */   "KEY_F17": () => (/* binding */ KEY_F17),
/* harmony export */   "KEY_F18": () => (/* binding */ KEY_F18),
/* harmony export */   "KEY_F19": () => (/* binding */ KEY_F19),
/* harmony export */   "KEY_F2": () => (/* binding */ KEY_F2),
/* harmony export */   "KEY_F20": () => (/* binding */ KEY_F20),
/* harmony export */   "KEY_F21": () => (/* binding */ KEY_F21),
/* harmony export */   "KEY_F22": () => (/* binding */ KEY_F22),
/* harmony export */   "KEY_F23": () => (/* binding */ KEY_F23),
/* harmony export */   "KEY_F24": () => (/* binding */ KEY_F24),
/* harmony export */   "KEY_F3": () => (/* binding */ KEY_F3),
/* harmony export */   "KEY_F4": () => (/* binding */ KEY_F4),
/* harmony export */   "KEY_F5": () => (/* binding */ KEY_F5),
/* harmony export */   "KEY_F6": () => (/* binding */ KEY_F6),
/* harmony export */   "KEY_F7": () => (/* binding */ KEY_F7),
/* harmony export */   "KEY_F8": () => (/* binding */ KEY_F8),
/* harmony export */   "KEY_F9": () => (/* binding */ KEY_F9),
/* harmony export */   "KEY_FIREFOX_ENTER": () => (/* binding */ KEY_FIREFOX_ENTER),
/* harmony export */   "KEY_FIREFOX_EQUALS": () => (/* binding */ KEY_FIREFOX_EQUALS),
/* harmony export */   "KEY_FIREFOX_META": () => (/* binding */ KEY_FIREFOX_META),
/* harmony export */   "KEY_FIREFOX_SEMICOLON": () => (/* binding */ KEY_FIREFOX_SEMICOLON),
/* harmony export */   "KEY_FIREFOX_SEPARATOR": () => (/* binding */ KEY_FIREFOX_SEPARATOR),
/* harmony export */   "KEY_G": () => (/* binding */ KEY_G),
/* harmony export */   "KEY_H": () => (/* binding */ KEY_H),
/* harmony export */   "KEY_HELP": () => (/* binding */ KEY_HELP),
/* harmony export */   "KEY_HOME": () => (/* binding */ KEY_HOME),
/* harmony export */   "KEY_I": () => (/* binding */ KEY_I),
/* harmony export */   "KEY_INSERT": () => (/* binding */ KEY_INSERT),
/* harmony export */   "KEY_J": () => (/* binding */ KEY_J),
/* harmony export */   "KEY_K": () => (/* binding */ KEY_K),
/* harmony export */   "KEY_L": () => (/* binding */ KEY_L),
/* harmony export */   "KEY_LEFT": () => (/* binding */ KEY_LEFT),
/* harmony export */   "KEY_LEFT_CMD": () => (/* binding */ KEY_LEFT_CMD),
/* harmony export */   "KEY_M": () => (/* binding */ KEY_M),
/* harmony export */   "KEY_MULTIPLY": () => (/* binding */ KEY_MULTIPLY),
/* harmony export */   "KEY_N": () => (/* binding */ KEY_N),
/* harmony export */   "KEY_NUMPAD0": () => (/* binding */ KEY_NUMPAD0),
/* harmony export */   "KEY_NUMPAD1": () => (/* binding */ KEY_NUMPAD1),
/* harmony export */   "KEY_NUMPAD2": () => (/* binding */ KEY_NUMPAD2),
/* harmony export */   "KEY_NUMPAD3": () => (/* binding */ KEY_NUMPAD3),
/* harmony export */   "KEY_NUMPAD4": () => (/* binding */ KEY_NUMPAD4),
/* harmony export */   "KEY_NUMPAD5": () => (/* binding */ KEY_NUMPAD5),
/* harmony export */   "KEY_NUMPAD6": () => (/* binding */ KEY_NUMPAD6),
/* harmony export */   "KEY_NUMPAD7": () => (/* binding */ KEY_NUMPAD7),
/* harmony export */   "KEY_NUMPAD8": () => (/* binding */ KEY_NUMPAD8),
/* harmony export */   "KEY_NUMPAD9": () => (/* binding */ KEY_NUMPAD9),
/* harmony export */   "KEY_NUM_LOCK": () => (/* binding */ KEY_NUM_LOCK),
/* harmony export */   "KEY_O": () => (/* binding */ KEY_O),
/* harmony export */   "KEY_OPEN_BRACKET": () => (/* binding */ KEY_OPEN_BRACKET),
/* harmony export */   "KEY_P": () => (/* binding */ KEY_P),
/* harmony export */   "KEY_PAGE_DOWN": () => (/* binding */ KEY_PAGE_DOWN),
/* harmony export */   "KEY_PAGE_UP": () => (/* binding */ KEY_PAGE_UP),
/* harmony export */   "KEY_PAUSE": () => (/* binding */ KEY_PAUSE),
/* harmony export */   "KEY_PERIOD": () => (/* binding */ KEY_PERIOD),
/* harmony export */   "KEY_PRINTSCREEN": () => (/* binding */ KEY_PRINTSCREEN),
/* harmony export */   "KEY_Q": () => (/* binding */ KEY_Q),
/* harmony export */   "KEY_QUOTE": () => (/* binding */ KEY_QUOTE),
/* harmony export */   "KEY_R": () => (/* binding */ KEY_R),
/* harmony export */   "KEY_RETURN": () => (/* binding */ KEY_RETURN),
/* harmony export */   "KEY_RIGHT": () => (/* binding */ KEY_RIGHT),
/* harmony export */   "KEY_RIGHT_CMD": () => (/* binding */ KEY_RIGHT_CMD),
/* harmony export */   "KEY_S": () => (/* binding */ KEY_S),
/* harmony export */   "KEY_SCROLL_LOCK": () => (/* binding */ KEY_SCROLL_LOCK),
/* harmony export */   "KEY_SEMICOLON": () => (/* binding */ KEY_SEMICOLON),
/* harmony export */   "KEY_SHIFT": () => (/* binding */ KEY_SHIFT),
/* harmony export */   "KEY_SLASH": () => (/* binding */ KEY_SLASH),
/* harmony export */   "KEY_SPACE": () => (/* binding */ KEY_SPACE),
/* harmony export */   "KEY_SUBTRACT": () => (/* binding */ KEY_SUBTRACT),
/* harmony export */   "KEY_T": () => (/* binding */ KEY_T),
/* harmony export */   "KEY_TAB": () => (/* binding */ KEY_TAB),
/* harmony export */   "KEY_U": () => (/* binding */ KEY_U),
/* harmony export */   "KEY_UP": () => (/* binding */ KEY_UP),
/* harmony export */   "KEY_V": () => (/* binding */ KEY_V),
/* harmony export */   "KEY_W": () => (/* binding */ KEY_W),
/* harmony export */   "KEY_X": () => (/* binding */ KEY_X),
/* harmony export */   "KEY_Y": () => (/* binding */ KEY_Y),
/* harmony export */   "KEY_Z": () => (/* binding */ KEY_Z),
/* harmony export */   "VALUE_0": () => (/* binding */ VALUE_0),
/* harmony export */   "VALUE_1": () => (/* binding */ VALUE_1),
/* harmony export */   "VALUE_2": () => (/* binding */ VALUE_2),
/* harmony export */   "VALUE_3": () => (/* binding */ VALUE_3),
/* harmony export */   "VALUE_4": () => (/* binding */ VALUE_4),
/* harmony export */   "VALUE_5": () => (/* binding */ VALUE_5),
/* harmony export */   "VALUE_6": () => (/* binding */ VALUE_6),
/* harmony export */   "VALUE_7": () => (/* binding */ VALUE_7),
/* harmony export */   "VALUE_8": () => (/* binding */ VALUE_8),
/* harmony export */   "VALUE_9": () => (/* binding */ VALUE_9),
/* harmony export */   "VALUE_A": () => (/* binding */ VALUE_A),
/* harmony export */   "VALUE_ADD": () => (/* binding */ VALUE_ADD),
/* harmony export */   "VALUE_ALT": () => (/* binding */ VALUE_ALT),
/* harmony export */   "VALUE_B": () => (/* binding */ VALUE_B),
/* harmony export */   "VALUE_BACK_QUOTE": () => (/* binding */ VALUE_BACK_QUOTE),
/* harmony export */   "VALUE_BACK_SLASH": () => (/* binding */ VALUE_BACK_SLASH),
/* harmony export */   "VALUE_BACK_SPACE": () => (/* binding */ VALUE_BACK_SPACE),
/* harmony export */   "VALUE_C": () => (/* binding */ VALUE_C),
/* harmony export */   "VALUE_CANCEL": () => (/* binding */ VALUE_CANCEL),
/* harmony export */   "VALUE_CAPS_LOCK": () => (/* binding */ VALUE_CAPS_LOCK),
/* harmony export */   "VALUE_CLEAR": () => (/* binding */ VALUE_CLEAR),
/* harmony export */   "VALUE_CLOSE_BRACKET": () => (/* binding */ VALUE_CLOSE_BRACKET),
/* harmony export */   "VALUE_COMMA": () => (/* binding */ VALUE_COMMA),
/* harmony export */   "VALUE_CONTEXT_MENU": () => (/* binding */ VALUE_CONTEXT_MENU),
/* harmony export */   "VALUE_CONTROL": () => (/* binding */ VALUE_CONTROL),
/* harmony export */   "VALUE_D": () => (/* binding */ VALUE_D),
/* harmony export */   "VALUE_DASH": () => (/* binding */ VALUE_DASH),
/* harmony export */   "VALUE_DECIMAL": () => (/* binding */ VALUE_DECIMAL),
/* harmony export */   "VALUE_DELETE": () => (/* binding */ VALUE_DELETE),
/* harmony export */   "VALUE_DIVIDE": () => (/* binding */ VALUE_DIVIDE),
/* harmony export */   "VALUE_DOWN": () => (/* binding */ VALUE_DOWN),
/* harmony export */   "VALUE_E": () => (/* binding */ VALUE_E),
/* harmony export */   "VALUE_END": () => (/* binding */ VALUE_END),
/* harmony export */   "VALUE_ENTER": () => (/* binding */ VALUE_ENTER),
/* harmony export */   "VALUE_EQUALS": () => (/* binding */ VALUE_EQUALS),
/* harmony export */   "VALUE_ESCAPE": () => (/* binding */ VALUE_ESCAPE),
/* harmony export */   "VALUE_F": () => (/* binding */ VALUE_F),
/* harmony export */   "VALUE_F1": () => (/* binding */ VALUE_F1),
/* harmony export */   "VALUE_F10": () => (/* binding */ VALUE_F10),
/* harmony export */   "VALUE_F11": () => (/* binding */ VALUE_F11),
/* harmony export */   "VALUE_F12": () => (/* binding */ VALUE_F12),
/* harmony export */   "VALUE_F13": () => (/* binding */ VALUE_F13),
/* harmony export */   "VALUE_F14": () => (/* binding */ VALUE_F14),
/* harmony export */   "VALUE_F15": () => (/* binding */ VALUE_F15),
/* harmony export */   "VALUE_F16": () => (/* binding */ VALUE_F16),
/* harmony export */   "VALUE_F17": () => (/* binding */ VALUE_F17),
/* harmony export */   "VALUE_F18": () => (/* binding */ VALUE_F18),
/* harmony export */   "VALUE_F19": () => (/* binding */ VALUE_F19),
/* harmony export */   "VALUE_F2": () => (/* binding */ VALUE_F2),
/* harmony export */   "VALUE_F20": () => (/* binding */ VALUE_F20),
/* harmony export */   "VALUE_F21": () => (/* binding */ VALUE_F21),
/* harmony export */   "VALUE_F22": () => (/* binding */ VALUE_F22),
/* harmony export */   "VALUE_F23": () => (/* binding */ VALUE_F23),
/* harmony export */   "VALUE_F24": () => (/* binding */ VALUE_F24),
/* harmony export */   "VALUE_F3": () => (/* binding */ VALUE_F3),
/* harmony export */   "VALUE_F4": () => (/* binding */ VALUE_F4),
/* harmony export */   "VALUE_F5": () => (/* binding */ VALUE_F5),
/* harmony export */   "VALUE_F6": () => (/* binding */ VALUE_F6),
/* harmony export */   "VALUE_F7": () => (/* binding */ VALUE_F7),
/* harmony export */   "VALUE_F8": () => (/* binding */ VALUE_F8),
/* harmony export */   "VALUE_F9": () => (/* binding */ VALUE_F9),
/* harmony export */   "VALUE_G": () => (/* binding */ VALUE_G),
/* harmony export */   "VALUE_H": () => (/* binding */ VALUE_H),
/* harmony export */   "VALUE_HELP": () => (/* binding */ VALUE_HELP),
/* harmony export */   "VALUE_HOME": () => (/* binding */ VALUE_HOME),
/* harmony export */   "VALUE_I": () => (/* binding */ VALUE_I),
/* harmony export */   "VALUE_INSERT": () => (/* binding */ VALUE_INSERT),
/* harmony export */   "VALUE_J": () => (/* binding */ VALUE_J),
/* harmony export */   "VALUE_K": () => (/* binding */ VALUE_K),
/* harmony export */   "VALUE_L": () => (/* binding */ VALUE_L),
/* harmony export */   "VALUE_LEFT": () => (/* binding */ VALUE_LEFT),
/* harmony export */   "VALUE_LEFT_CMD": () => (/* binding */ VALUE_LEFT_CMD),
/* harmony export */   "VALUE_M": () => (/* binding */ VALUE_M),
/* harmony export */   "VALUE_META": () => (/* binding */ VALUE_META),
/* harmony export */   "VALUE_MULTIPLY": () => (/* binding */ VALUE_MULTIPLY),
/* harmony export */   "VALUE_N": () => (/* binding */ VALUE_N),
/* harmony export */   "VALUE_NUMPAD0": () => (/* binding */ VALUE_NUMPAD0),
/* harmony export */   "VALUE_NUMPAD1": () => (/* binding */ VALUE_NUMPAD1),
/* harmony export */   "VALUE_NUMPAD2": () => (/* binding */ VALUE_NUMPAD2),
/* harmony export */   "VALUE_NUMPAD3": () => (/* binding */ VALUE_NUMPAD3),
/* harmony export */   "VALUE_NUMPAD4": () => (/* binding */ VALUE_NUMPAD4),
/* harmony export */   "VALUE_NUMPAD5": () => (/* binding */ VALUE_NUMPAD5),
/* harmony export */   "VALUE_NUMPAD6": () => (/* binding */ VALUE_NUMPAD6),
/* harmony export */   "VALUE_NUMPAD7": () => (/* binding */ VALUE_NUMPAD7),
/* harmony export */   "VALUE_NUMPAD8": () => (/* binding */ VALUE_NUMPAD8),
/* harmony export */   "VALUE_NUMPAD9": () => (/* binding */ VALUE_NUMPAD9),
/* harmony export */   "VALUE_NUM_LOCK": () => (/* binding */ VALUE_NUM_LOCK),
/* harmony export */   "VALUE_O": () => (/* binding */ VALUE_O),
/* harmony export */   "VALUE_OPEN_BRACKET": () => (/* binding */ VALUE_OPEN_BRACKET),
/* harmony export */   "VALUE_P": () => (/* binding */ VALUE_P),
/* harmony export */   "VALUE_PAGE_DOWN": () => (/* binding */ VALUE_PAGE_DOWN),
/* harmony export */   "VALUE_PAGE_UP": () => (/* binding */ VALUE_PAGE_UP),
/* harmony export */   "VALUE_PAUSE": () => (/* binding */ VALUE_PAUSE),
/* harmony export */   "VALUE_PERIOD": () => (/* binding */ VALUE_PERIOD),
/* harmony export */   "VALUE_PRINTSCREEN": () => (/* binding */ VALUE_PRINTSCREEN),
/* harmony export */   "VALUE_Q": () => (/* binding */ VALUE_Q),
/* harmony export */   "VALUE_QUOTE": () => (/* binding */ VALUE_QUOTE),
/* harmony export */   "VALUE_R": () => (/* binding */ VALUE_R),
/* harmony export */   "VALUE_RETURN": () => (/* binding */ VALUE_RETURN),
/* harmony export */   "VALUE_RIGHT": () => (/* binding */ VALUE_RIGHT),
/* harmony export */   "VALUE_RIGHT_CMD": () => (/* binding */ VALUE_RIGHT_CMD),
/* harmony export */   "VALUE_S": () => (/* binding */ VALUE_S),
/* harmony export */   "VALUE_SCROLL_LOCK": () => (/* binding */ VALUE_SCROLL_LOCK),
/* harmony export */   "VALUE_SEMICOLON": () => (/* binding */ VALUE_SEMICOLON),
/* harmony export */   "VALUE_SHIFT": () => (/* binding */ VALUE_SHIFT),
/* harmony export */   "VALUE_SLASH": () => (/* binding */ VALUE_SLASH),
/* harmony export */   "VALUE_SPACE": () => (/* binding */ VALUE_SPACE),
/* harmony export */   "VALUE_SUBTRACT": () => (/* binding */ VALUE_SUBTRACT),
/* harmony export */   "VALUE_T": () => (/* binding */ VALUE_T),
/* harmony export */   "VALUE_TAB": () => (/* binding */ VALUE_TAB),
/* harmony export */   "VALUE_U": () => (/* binding */ VALUE_U),
/* harmony export */   "VALUE_UP": () => (/* binding */ VALUE_UP),
/* harmony export */   "VALUE_V": () => (/* binding */ VALUE_V),
/* harmony export */   "VALUE_W": () => (/* binding */ VALUE_W),
/* harmony export */   "VALUE_X": () => (/* binding */ VALUE_X),
/* harmony export */   "VALUE_Y": () => (/* binding */ VALUE_Y),
/* harmony export */   "VALUE_Z": () => (/* binding */ VALUE_Z)
/* harmony export */ });
// Key code constants
// Available values for `KeyboardEvent.keyCode` attribute.
var KEY_CANCEL = 3;
var KEY_HELP = 6;
var KEY_BACK_SPACE = 8;
var KEY_TAB = 9;
var KEY_CLEAR = 12;
var KEY_RETURN = 13;
var KEY_SHIFT = 16;
var KEY_CONTROL = 17;
var KEY_ALT = 18;
var KEY_PAUSE = 19;
var KEY_CAPS_LOCK = 20;
var KEY_ESCAPE = 27;
var KEY_SPACE = 32;
var KEY_PAGE_UP = 33;
var KEY_PAGE_DOWN = 34;
var KEY_END = 35;
var KEY_HOME = 36;
var KEY_LEFT = 37;
var KEY_UP = 38;
var KEY_RIGHT = 39;
var KEY_DOWN = 40;
var KEY_PRINTSCREEN = 44;
var KEY_INSERT = 45;
var KEY_DELETE = 46;
var KEY_0 = 48;
var KEY_1 = 49;
var KEY_2 = 50;
var KEY_3 = 51;
var KEY_4 = 52;
var KEY_5 = 53;
var KEY_6 = 54;
var KEY_7 = 55;
var KEY_8 = 56;
var KEY_9 = 57;
var KEY_A = 65;
var KEY_B = 66;
var KEY_C = 67;
var KEY_D = 68;
var KEY_E = 69;
var KEY_F = 70;
var KEY_G = 71;
var KEY_H = 72;
var KEY_I = 73;
var KEY_J = 74;
var KEY_K = 75;
var KEY_L = 76;
var KEY_M = 77;
var KEY_N = 78;
var KEY_O = 79;
var KEY_P = 80;
var KEY_Q = 81;
var KEY_R = 82;
var KEY_S = 83;
var KEY_T = 84;
var KEY_U = 85;
var KEY_V = 86;
var KEY_W = 87;
var KEY_X = 88;
var KEY_Y = 89;
var KEY_Z = 90;
var KEY_LEFT_CMD = 91;
var KEY_RIGHT_CMD = 92;
var KEY_CONTEXT_MENU = 93;
var KEY_NUMPAD0 = 96;
var KEY_NUMPAD1 = 97;
var KEY_NUMPAD2 = 98;
var KEY_NUMPAD3 = 99;
var KEY_NUMPAD4 = 100;
var KEY_NUMPAD5 = 101;
var KEY_NUMPAD6 = 102;
var KEY_NUMPAD7 = 103;
var KEY_NUMPAD8 = 104;
var KEY_NUMPAD9 = 105;
var KEY_MULTIPLY = 106;
var KEY_ADD = 107;
var KEY_SUBTRACT = 109;
var KEY_DECIMAL = 110;
var KEY_DIVIDE = 111;
var KEY_F1 = 112;
var KEY_F2 = 113;
var KEY_F3 = 114;
var KEY_F4 = 115;
var KEY_F5 = 116;
var KEY_F6 = 117;
var KEY_F7 = 118;
var KEY_F8 = 119;
var KEY_F9 = 120;
var KEY_F10 = 121;
var KEY_F11 = 122;
var KEY_F12 = 123;
var KEY_F13 = 124;
var KEY_F14 = 125;
var KEY_F15 = 126;
var KEY_F16 = 127;
var KEY_F17 = 128;
var KEY_F18 = 129;
var KEY_F19 = 130;
var KEY_F20 = 131;
var KEY_F21 = 132;
var KEY_F22 = 133;
var KEY_F23 = 134;
var KEY_F24 = 135;
var KEY_NUM_LOCK = 144;
var KEY_SCROLL_LOCK = 145;
var KEY_SEMICOLON = 186;
var KEY_EQUALS = 187;
var KEY_COMMA = 188;
var KEY_DASH = 189;
var KEY_PERIOD = 190;
var KEY_SLASH = 191;
var KEY_BACK_QUOTE = 192;
var KEY_OPEN_BRACKET = 219;
var KEY_BACK_SLASH = 220;
var KEY_CLOSE_BRACKET = 221;
var KEY_QUOTE = 222;
// Key code constants specific to firefox only.
var KEY_FIREFOX_ENTER = 14;
var KEY_FIREFOX_SEMICOLON = 59;
var KEY_FIREFOX_EQUALS = 61;
var KEY_FIREFOX_SEPARATOR = 108;
var KEY_FIREFOX_META = 224;
// Key values constants
// Available values for `KeyboardEvent.key` attribute.
var VALUE_CANCEL = 'Cancel';
var VALUE_HELP = 'Help';
var VALUE_BACK_SPACE = 'Backspace';
var VALUE_TAB = 'Tab';
var VALUE_CLEAR = 'Clear';
var VALUE_ENTER = 'Enter';
var VALUE_RETURN = 'Enter';
var VALUE_SHIFT = 'Shift';
var VALUE_CONTROL = 'Control';
var VALUE_ALT = 'Alt';
var VALUE_PAUSE = 'Pause';
var VALUE_CAPS_LOCK = 'CapsLock';
var VALUE_ESCAPE = 'Escape';
var VALUE_SPACE = ' ';
var VALUE_PAGE_UP = 'PageUp';
var VALUE_PAGE_DOWN = 'PageDown';
var VALUE_END = 'End';
var VALUE_HOME = 'Home';
var VALUE_LEFT = 'ArrowLeft';
var VALUE_UP = 'ArrowUp';
var VALUE_RIGHT = 'ArrowRight';
var VALUE_DOWN = 'ArrowDown';
var VALUE_PRINTSCREEN = 'PrintScreen';
var VALUE_INSERT = 'Insert';
var VALUE_DELETE = 'Delete';
var VALUE_0 = '0';
var VALUE_1 = '1';
var VALUE_2 = '2';
var VALUE_3 = '3';
var VALUE_4 = '4';
var VALUE_5 = '5';
var VALUE_6 = '6';
var VALUE_7 = '7';
var VALUE_8 = '8';
var VALUE_9 = '9';
var VALUE_A = 'a';
var VALUE_B = 'b';
var VALUE_C = 'c';
var VALUE_D = 'd';
var VALUE_E = 'e';
var VALUE_F = 'f';
var VALUE_G = 'g';
var VALUE_H = 'h';
var VALUE_I = 'i';
var VALUE_J = 'j';
var VALUE_K = 'k';
var VALUE_L = 'l';
var VALUE_M = 'm';
var VALUE_N = 'n';
var VALUE_O = 'o';
var VALUE_P = 'p';
var VALUE_Q = 'q';
var VALUE_R = 'r';
var VALUE_S = 's';
var VALUE_T = 't';
var VALUE_U = 'u';
var VALUE_V = 'v';
var VALUE_W = 'w';
var VALUE_X = 'x';
var VALUE_Y = 'y';
var VALUE_Z = 'z';
var VALUE_META = 'Meta';
var VALUE_LEFT_CMD = 'Meta';
var VALUE_RIGHT_CMD = 'Meta';
var VALUE_CONTEXT_MENU = 'ContextMenu';
var VALUE_NUMPAD0 = '0';
var VALUE_NUMPAD1 = '1';
var VALUE_NUMPAD2 = '2';
var VALUE_NUMPAD3 = '3';
var VALUE_NUMPAD4 = '4';
var VALUE_NUMPAD5 = '5';
var VALUE_NUMPAD6 = '6';
var VALUE_NUMPAD7 = '7';
var VALUE_NUMPAD8 = '8';
var VALUE_NUMPAD9 = '9';
var VALUE_MULTIPLY = '*';
var VALUE_ADD = '+';
var VALUE_SUBTRACT = '-';
var VALUE_DECIMAL = '.';
var VALUE_DIVIDE = '/';
var VALUE_F1 = 'F1';
var VALUE_F2 = 'F2';
var VALUE_F3 = 'F3';
var VALUE_F4 = 'F4';
var VALUE_F5 = 'F5';
var VALUE_F6 = 'F6';
var VALUE_F7 = 'F7';
var VALUE_F8 = 'F8';
var VALUE_F9 = 'F9';
var VALUE_F10 = 'F10';
var VALUE_F11 = 'F11';
var VALUE_F12 = 'F12';
var VALUE_F13 = 'F13';
var VALUE_F14 = 'F14';
var VALUE_F15 = 'F15';
var VALUE_F16 = 'F16';
var VALUE_F17 = 'F17';
var VALUE_F18 = 'F18';
var VALUE_F19 = 'F19';
var VALUE_F20 = 'F20';
var VALUE_F21 = 'F21';
var VALUE_F22 = 'F22';
var VALUE_F23 = 'F23';
var VALUE_F24 = 'F24';
var VALUE_NUM_LOCK = 'NumLock';
var VALUE_SCROLL_LOCK = 'ScrollLock';
var VALUE_SEMICOLON = ';';
var VALUE_EQUALS = '=';
var VALUE_COMMA = ',';
var VALUE_DASH = '-';
var VALUE_PERIOD = '.';
var VALUE_SLASH = '/';
var VALUE_BACK_QUOTE = '`';
var VALUE_OPEN_BRACKET = '[';
var VALUE_BACK_SLASH = '\\';
var VALUE_CLOSE_BRACKET = ']';
var VALUE_QUOTE = "'";
// Key code constants
// Available values for `KeyboardEvent.code` attribute.
var CODE_UNIDENTIFIED = 'Unidentified';
var CODE_ESCAPE = 'Escape';
var CODE_MINUS = 'Minus';
var CODE_DASH = 'Minus';
var CODE_EQUALS = 'Equal';
var CODE_BACK_SPACE = 'Backspace';
var CODE_TAB = 'Tab';
var CODE_ENTER = 'Enter';
var CODE_RETURN = 'Enter';
var CODE_SHIFT_LEFT = 'ShiftLeft';
var CODE_SHIFT_RIGHT = 'ShiftRight';
var CODE_CONTROL_LEFT = 'ControlLeft';
var CODE_CONTROL_RIGHT = 'ControlRight';
var CODE_ALT_LEFT = 'AltLeft';
var CODE_ALT_RIGHT = 'AltRight';
var CODE_PAUSE = 'Pause';
var CODE_CAPS_LOCK = 'CapsLock';
var CODE_SPACE = 'Space';
var CODE_PAGE_UP = 'PageUp';
var CODE_PAGE_DOWN = 'PageDown';
var CODE_END = 'End';
var CODE_HOME = 'Home';
var CODE_LEFT = 'ArrowLeft';
var CODE_UP = 'ArrowUp';
var CODE_RIGHT = 'ArrowRight';
var CODE_DOWN = 'ArrowDown';
var CODE_PRINTSCREEN = 'PrintScreen';
var CODE_INSERT = 'Insert';
var CODE_DELETE = 'Delete';
var CODE_0 = 'Digit0';
var CODE_1 = 'Digit1';
var CODE_2 = 'Digit2';
var CODE_3 = 'Digit3';
var CODE_4 = 'Digit4';
var CODE_5 = 'Digit5';
var CODE_6 = 'Digit6';
var CODE_7 = 'Digit7';
var CODE_8 = 'Digit8';
var CODE_9 = 'Digit9';
var CODE_A = 'KeyA';
var CODE_B = 'KeyB';
var CODE_C = 'KeyC';
var CODE_D = 'KeyD';
var CODE_E = 'KeyE';
var CODE_F = 'KeyF';
var CODE_G = 'KeyG';
var CODE_H = 'KeyH';
var CODE_I = 'KeyI';
var CODE_J = 'KeyJ';
var CODE_K = 'KeyK';
var CODE_L = 'KeyL';
var CODE_M = 'KeyM';
var CODE_N = 'KeyN';
var CODE_O = 'KeyO';
var CODE_P = 'KeyP';
var CODE_Q = 'KeyQ';
var CODE_R = 'KeyR';
var CODE_S = 'KeyS';
var CODE_T = 'KeyT';
var CODE_U = 'KeyU';
var CODE_V = 'KeyV';
var CODE_W = 'KeyW';
var CODE_X = 'KeyX';
var CODE_Y = 'KeyY';
var CODE_Z = 'KeyZ';
var CODE_META_LEFT = 'MetaLeft';
var CODE_OS_LEFT = 'OSLeft';
var CODE_META_RIGHT = 'MetaRight';
var CODE_OS_RIGHT = 'OSRight';
var CODE_CONTEXT_MENU = 'ContextMenu';
var CODE_NUMPAD0 = 'Numpad0';
var CODE_NUMPAD1 = 'Numpad1';
var CODE_NUMPAD2 = 'Numpad2';
var CODE_NUMPAD3 = 'Numpad3';
var CODE_NUMPAD4 = 'Numpad4';
var CODE_NUMPAD5 = 'Numpad5';
var CODE_NUMPAD6 = 'Numpad6';
var CODE_NUMPAD7 = 'Numpad7';
var CODE_NUMPAD8 = 'Numpad8';
var CODE_NUMPAD9 = 'Numpad9';
var CODE_NUMPAD_MULTIPLY = 'NumpadMultiply';
var CODE_NUMPAD_ADD = 'NumpadAdd';
var CODE_NUMPAD_SUBTRACT = 'NumpadSubtract';
var CODE_NUMPAD_DECIMAL = 'NumpadDecimal';
var CODE_NUMPAD_DIVIDE = 'NumpadDivide';
var CODE_NUMPAD_ENTER = 'NumpadEnter';
var CODE_F1 = 'F1';
var CODE_F2 = 'F2';
var CODE_F3 = 'F3';
var CODE_F4 = 'F4';
var CODE_F5 = 'F5';
var CODE_F6 = 'F6';
var CODE_F7 = 'F7';
var CODE_F8 = 'F8';
var CODE_F9 = 'F9';
var CODE_F10 = 'F10';
var CODE_F11 = 'F11';
var CODE_F12 = 'F12';
var CODE_F13 = 'F13';
var CODE_F14 = 'F14';
var CODE_F15 = 'F15';
var CODE_F16 = 'F16';
var CODE_F17 = 'F17';
var CODE_F18 = 'F18';
var CODE_F19 = 'F19';
var CODE_F20 = 'F20';
var CODE_F21 = 'F21';
var CODE_F22 = 'F22';
var CODE_F23 = 'F23';
var CODE_F24 = 'F24';
var CODE_NUM_LOCK = 'NumLock';
var CODE_SCROLL_LOCK = 'ScrollLock';
var CODE_SEMICOLON = 'Semicolon';
var CODE_COMMA = 'Comma';
var CODE_PERIOD = 'Period';
var CODE_SLASH = 'Slash';
var CODE_BACK_QUOTE = 'Backquote';
var CODE_OPEN_BRACKET = 'BracketLeft';
var CODE_BACK_SLASH = 'Backslash';
var CODE_CLOSE_BRACKET = 'BracketRight';
var CODE_QUOTE = 'Quote';




/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__values": () => (/* binding */ __values),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || from);
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,